{
    "instance_id": "sympy__sympy-16792",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..eb6e6dcbf9 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -449,6 +449,19 @@ def _prototype_arg(self, arg):\n         else:\n             return \"%s %s\" % (t, self._string_var(arg.name))\n \n+    def _call_arg(self, arg):\n+        np_types = {'double': 'np.double_t',\n+                    'int': 'np.int_t'}\n+        if arg.dimensions:\n+            t = arg.get_datatype('c')\n+            return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, InputArgument) and arg.dimensions:\n+            return \"np.ndarray[{0}, ndim={1}] {2}\".format(np_types[t], len(arg.dimensions), self._string_var(arg.name))\n+        elif isinstance(arg, ResultBase):\n+            return \"&{0}\".format(self._string_var(arg.name))\n+        else:\n+            return self._string_var(arg.name)\n+\n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n         if arg.dimensions:\n@@ -458,9 +471,13 @@ def _declare_arg(self, arg):\n             return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n+        np_types = {'double': 'np.double_t',\n+                    'int': 'np.int_t'}\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, InputArgument) and arg.dimensions:\n+            return \"np.ndarray[{0}, ndim={1}] {2}\".format(np_types[t], len(arg.dimensions), self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n         else:\n",
    "model": "gpt-4o",
    "cost": 0.40204000000000006,
    "added_files": [
        "sympy/utilities/autowrap.py"
    ],
    "gold_files": [
        "sympy/utilities/codegen.py"
    ],
    "edited_files": [
        "sympy/utilities/autowrap.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "sympy__sympy-16792",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..eb6e6dcbf9 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -449,6 +449,19 @@ def _prototype_arg(self, arg):\n         else:\n             return \"%s %s\" % (t, self._string_var(arg.name))\n \n+    def _call_arg(self, arg):\n+        np_types = {'double': 'np.double_t',\n+                    'int': 'np.int_t'}\n+        if arg.dimensions:\n+            t = arg.get_datatype('c')\n+            return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, InputArgument) and arg.dimensions:\n+            return \"np.ndarray[{0}, ndim={1}] {2}\".format(np_types[t], len(arg.dimensions), self._string_var(arg.name))\n+        elif isinstance(arg, ResultBase):\n+            return \"&{0}\".format(self._string_var(arg.name))\n+        else:\n+            return self._string_var(arg.name)\n+\n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n         if arg.dimensions:\n@@ -458,9 +471,13 @@ def _declare_arg(self, arg):\n             return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n+        np_types = {'double': 'np.double_t',\n+                    'int': 'np.int_t'}\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, InputArgument) and arg.dimensions:\n+            return \"np.ndarray[{0}, ndim={1}] {2}\".format(np_types[t], len(arg.dimensions), self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n         else:\n",
            "model": "gpt-4o",
            "cost": 0.40204000000000006,
            "added_files": [
                "sympy/utilities/autowrap.py"
            ],
            "gold_files": [
                "sympy/utilities/codegen.py"
            ],
            "edited_files": [
                "sympy/utilities/autowrap.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": false
}