{
    "instance_id": "pytest-dev__pytest-5103",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..fb24daf8f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -606,6 +606,13 @@ def set_location(node, lineno, col_offset):\n \n \n class AssertionRewriter(ast.NodeVisitor):\n+    def is_all_or_any_call(self, call):\n+        \"\"\"Check if the call is to the built-in all or any functions.\"\"\"\n+        return (\n+            isinstance(call.func, ast.Name)\n+            and call.func.id in {\"all\", \"any\"}\n+            and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp))\n+        )\n     \"\"\"Assertion rewriting implementation.\n \n     The main entrypoint is to call .run() with an ast.Module instance,\n@@ -965,6 +972,8 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        if self.is_all_or_any_call(call):\n+            return self.visit_all_any_call(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1027,6 +1036,44 @@ warn_explicit(\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n+    def visit_all_any_call(self, call):\n+        \"\"\"Unroll the iterable for all/any calls to get better reports.\"\"\"\n+        new_func, func_expl = self.visit(call.func)\n+        arg = call.args[0]\n+        if isinstance(arg, ast.GeneratorExp):\n+            iter_expr = arg.iter\n+            elt_expr = arg.elt\n+        else:  # ast.ListComp\n+            iter_expr = arg.generators[0].iter\n+            elt_expr = arg.elt\n+\n+        res_var = self.variable()\n+        expl_list = self.assign(ast.List([], ast.Load()))\n+        app = ast.Attribute(expl_list, \"append\", ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+        self.push_format_context()\n+\n+        loop_var = ast.Name(id=\"item\", ctx=ast.Store())\n+        loop_body = []\n+        self.statements = loop_body\n+        self.on_failure = loop_body\n+\n+        res, expl = self.visit(elt_expr)\n+        loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+        expl_format = self.pop_format_context(ast.Str(expl))\n+        call = ast_Call(app, [expl_format], [])\n+        loop_body.append(ast.Expr(call))\n+\n+        loop = ast.For(target=loop_var, iter=iter_expr, body=loop_body, orelse=[])\n+        self.statements = save\n+        self.on_failure = fail_save\n+        self.statements.append(loop)\n+\n+        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(isinstance(call.func, ast.Name) and call.func.id == \"any\"))\n+        expl = self.pop_format_context(expl_template)\n+        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n+\n     # ast.Call signature changed on 3.5,\n     # conditionally change  which methods is named\n     # visit_Call depending on Python version\n",
    "cost": 0.248205,
    "added_files": [
        "src/_pytest/assertion/rewrite.py"
    ],
    "gold_files": [
        "src/_pytest/assertion/rewrite.py"
    ],
    "edited_files": [
        "src/_pytest/assertion/rewrite.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "pytest-dev__pytest-5103",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..fb24daf8f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -606,6 +606,13 @@ def set_location(node, lineno, col_offset):\n \n \n class AssertionRewriter(ast.NodeVisitor):\n+    def is_all_or_any_call(self, call):\n+        \"\"\"Check if the call is to the built-in all or any functions.\"\"\"\n+        return (\n+            isinstance(call.func, ast.Name)\n+            and call.func.id in {\"all\", \"any\"}\n+            and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp))\n+        )\n     \"\"\"Assertion rewriting implementation.\n \n     The main entrypoint is to call .run() with an ast.Module instance,\n@@ -965,6 +972,8 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        if self.is_all_or_any_call(call):\n+            return self.visit_all_any_call(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1027,6 +1036,44 @@ warn_explicit(\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n+    def visit_all_any_call(self, call):\n+        \"\"\"Unroll the iterable for all/any calls to get better reports.\"\"\"\n+        new_func, func_expl = self.visit(call.func)\n+        arg = call.args[0]\n+        if isinstance(arg, ast.GeneratorExp):\n+            iter_expr = arg.iter\n+            elt_expr = arg.elt\n+        else:  # ast.ListComp\n+            iter_expr = arg.generators[0].iter\n+            elt_expr = arg.elt\n+\n+        res_var = self.variable()\n+        expl_list = self.assign(ast.List([], ast.Load()))\n+        app = ast.Attribute(expl_list, \"append\", ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+        self.push_format_context()\n+\n+        loop_var = ast.Name(id=\"item\", ctx=ast.Store())\n+        loop_body = []\n+        self.statements = loop_body\n+        self.on_failure = loop_body\n+\n+        res, expl = self.visit(elt_expr)\n+        loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+        expl_format = self.pop_format_context(ast.Str(expl))\n+        call = ast_Call(app, [expl_format], [])\n+        loop_body.append(ast.Expr(call))\n+\n+        loop = ast.For(target=loop_var, iter=iter_expr, body=loop_body, orelse=[])\n+        self.statements = save\n+        self.on_failure = fail_save\n+        self.statements.append(loop)\n+\n+        expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(isinstance(call.func, ast.Name) and call.func.id == \"any\"))\n+        expl = self.pop_format_context(expl_template)\n+        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n+\n     # ast.Call signature changed on 3.5,\n     # conditionally change  which methods is named\n     # visit_Call depending on Python version\n",
            "cost": 0.248205,
            "added_files": [
                "src/_pytest/assertion/rewrite.py"
            ],
            "gold_files": [
                "src/_pytest/assertion/rewrite.py"
            ],
            "edited_files": [
                "src/_pytest/assertion/rewrite.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": false
}