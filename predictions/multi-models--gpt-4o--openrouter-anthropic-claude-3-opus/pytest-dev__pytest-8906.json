{
    "instance_id": "pytest-dev__pytest-8906",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..e4ac24242 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -32,7 +32,10 @@ class OutcomeException(BaseException):\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                 \"Perhaps you meant to use a mark?\"\n             )\n-            raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n+            raise TypeError(\n+                error_msg.format(type(self).__name__, type(msg).__name__)\n+                + \"\\nTo skip a module, use pytest.skip(msg, allow_module_level=True) instead.\"\n+            )\n         BaseException.__init__(self, msg)\n         self.msg = msg\n         self.pytrace = pytrace\n@@ -128,6 +131,37 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    :param str msg: The message to show in the skipped reason.\n+    :param bool allow_module_level:\n+        Allows this function to be called at module level, skipping the rest\n+        of the module. Defaults to False.\n+\n+    .. note::\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        possible to declare a test to be skipped under certain conditions\n+        like mismatching platforms or dependencies.\n+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=reason, allow_module_level=True)\n+\n+def skip_module(reason: str) -> \"NoReturn\":\n+    \"\"\"Skip the rest of the current module.\n+\n+    This function should be called at module level, before any test code.\n+    The rest of the module will not be executed, including any fixtures or tests.\n+\n+    :param str reason: The reason to show for skipping the module.\n+    \"\"\"\n+    skip(msg=reason, allow_module_level=True)\n+    \"\"\"Skip an executing test with the given message.\n+\n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n",
    "model": "openrouter/anthropic/claude-3-opus",
    "cost": 7.19471,
    "added_files": [
        "src/_pytest/outcomes.py",
        "src/_pytest/python.py"
    ],
    "gold_files": [
        "src/_pytest/python.py"
    ],
    "edited_files": [
        "src/_pytest/outcomes.py"
    ],
    "edit_outcome": true,
    "lint_outcome": false,
    "test_outcome": null,
    "try": 1,
    "tries": 3,
    "all_results": [
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/mark/__init__.py b/src/_pytest/mark/__init__.py\nindex 0dc3718e8..23d563ad9 100644\n--- a/src/_pytest/mark/__init__.py\n+++ b/src/_pytest/mark/__init__.py\n@@ -29,6 +29,7 @@ from _pytest.store import StoreKey\n \n if TYPE_CHECKING:\n     from _pytest.nodes import Item\n+    from _pytest.outcomes import skip\n \n \n __all__ = [\ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..55fa2b236 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -144,6 +144,38 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the entire module.\n+\n+    :param str msg: The message to show the user as reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"Skip an executing test with the given message.\n+\n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n+    :param bool allow_module_level:\n+        Allows this function to be called at module level, skipping the rest\n+        of the module. Defaults to False.\n+\n+    .. note::\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        possible to declare a test to be skipped under certain conditions\n+        like mismatching platforms or dependencies.\n+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n",
            "model": "gpt-4o",
            "cost": 0.37484500000000004,
            "added_files": [
                "src/_pytest/mark/__init__.py",
                "src/_pytest/outcomes.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/mark/__init__.py",
                "src/_pytest/outcomes.py"
            ],
            "edit_outcome": false,
            "lint_outcome": null,
            "test_outcome": null,
            "try": 1
        },
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..e4ac24242 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -32,7 +32,10 @@ class OutcomeException(BaseException):\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                 \"Perhaps you meant to use a mark?\"\n             )\n-            raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n+            raise TypeError(\n+                error_msg.format(type(self).__name__, type(msg).__name__)\n+                + \"\\nTo skip a module, use pytest.skip(msg, allow_module_level=True) instead.\"\n+            )\n         BaseException.__init__(self, msg)\n         self.msg = msg\n         self.pytrace = pytrace\n@@ -128,6 +131,37 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    :param str msg: The message to show in the skipped reason.\n+    :param bool allow_module_level:\n+        Allows this function to be called at module level, skipping the rest\n+        of the module. Defaults to False.\n+\n+    .. note::\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        possible to declare a test to be skipped under certain conditions\n+        like mismatching platforms or dependencies.\n+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=reason, allow_module_level=True)\n+\n+def skip_module(reason: str) -> \"NoReturn\":\n+    \"\"\"Skip the rest of the current module.\n+\n+    This function should be called at module level, before any test code.\n+    The rest of the module will not be executed, including any fixtures or tests.\n+\n+    :param str reason: The reason to show for skipping the module.\n+    \"\"\"\n+    skip(msg=reason, allow_module_level=True)\n+    \"\"\"Skip an executing test with the given message.\n+\n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.89249,
            "added_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/python.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/outcomes.py"
            ],
            "edit_outcome": true,
            "lint_outcome": false,
            "test_outcome": null,
            "try": 1
        },
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/mark/__init__.py b/src/_pytest/mark/__init__.py\nindex 0dc3718e8..338057d4f 100644\n--- a/src/_pytest/mark/__init__.py\n+++ b/src/_pytest/mark/__init__.py\n@@ -32,6 +32,7 @@ if TYPE_CHECKING:\n \n \n __all__ = [\n+    \"skip_module\",\n     \"MARK_GEN\",\n     \"Mark\",\n     \"MarkDecorator\",\ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..587fcccbd 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -92,6 +92,12 @@ _F = TypeVar(\"_F\", bound=Callable[..., object])\n _ET = TypeVar(\"_ET\", bound=Type[BaseException])\n \n \n+class XFailed(Failed):\n+    \"\"\"Raised from an explicit call to pytest.xfail().\"\"\"\n+\n+    __module__ = \"builtins\"\n+\n+\n class _WithException(Protocol[_F, _ET]):\n     Exception: _ET\n     __call__: _F\n@@ -136,6 +142,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n+        \n+        If you need to skip at the module level, use `skip(msg, allow_module_level=True)`.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n@@ -158,7 +166,22 @@ def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     raise Failed(msg=msg, pytrace=pytrace)\n \n \n-class XFailed(Failed):\n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called only at the module level.\n+\n+    Example usage:\n+\n+        if sys.version_info < (3, 8):\n+            skip_module(\"Requires Python >= 3.8\")\n+\n+    :param str msg: The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+\n     \"\"\"Raised from an explicit call to pytest.xfail().\"\"\"\n \n \n",
            "model": "gpt-4o",
            "cost": 0.365435,
            "added_files": [
                "src/_pytest/mark/__init__.py",
                "src/_pytest/outcomes.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/mark/__init__.py",
                "src/_pytest/outcomes.py"
            ],
            "edit_outcome": false,
            "lint_outcome": false,
            "test_outcome": null,
            "try": 2
        },
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..f0eb783fb 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -230,3 +230,13 @@ def importorskip(\n                 allow_module_level=True,\n             )\n     return mod\n+\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the current module.\n+\n+    This function should be called at module level to skip the entire module.\n+\n+    :param str msg: The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..a6021b240 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -610,8 +610,9 @@ class Module(nodes.File, PyCollector):\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead. To skip a \"\n+                \"module, use `pytestmark = pytest.mark.{skip,skipif}` or \"\n+                \"`pytest.skip_module()`.\"\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n@@ -996,7 +997,7 @@ class Metafunc:\n         ids: Optional[\n             Union[\n                 Iterable[Union[None, str, float, int, bool]],\n-                Callable[[Any], Optional[object]],\n+                Callable[[object], Optional[object]],\n             ]\n         ] = None,\n         scope: \"Optional[_Scope]\" = None,\n@@ -1122,7 +1123,7 @@ class Metafunc:\n         ids: Optional[\n             Union[\n                 Iterable[Union[None, str, float, int, bool]],\n-                Callable[[Any], Optional[object]],\n+                Callable[[object], Optional[object]],\n             ]\n         ],\n         parameters: Sequence[ParameterSet],\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.909665,
            "added_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/python.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/python.py"
            ],
            "edit_outcome": true,
            "lint_outcome": false,
            "test_outcome": null,
            "try": 2
        },
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..61c90df01 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -158,6 +158,19 @@ def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     raise Failed(msg=msg, pytrace=pytrace)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the rest of the module.\n+\n+    :param str msg:\n+        The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+\n+\n class XFailed(Failed):\n     \"\"\"Raised from an explicit call to pytest.xfail().\"\"\"\n \n",
            "model": "gpt-4o",
            "cost": 0.65285,
            "added_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/terminal.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/outcomes.py"
            ],
            "edit_outcome": false,
            "lint_outcome": null,
            "test_outcome": null,
            "try": 3
        },
        {
            "instance_id": "pytest-dev__pytest-8906",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..034ff6810 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -122,6 +122,39 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n \n @_with_exception(Skipped)\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n+    \"\"\"Skip an executing test or setup/teardown function with the given message.\n+\n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n+    :param str msg: The message to show in the skipped reason.\n+    :param bool allow_module_level: Allows this function to be called at\n+        module level, skipping the rest of the module. Defaults to False.\n+    \"\"\"\n+\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the current module.\n+\n+    This function should be called at module level, before any tests are collected.\n+    The entire module will be skipped with the provided message.\n+\n+    :param str msg: The message to show in the skipped reason.\n+    \"\"\"\n+    \"\"\"Skip an executing test or setup/teardown function with the given message.\n+    \n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n+    :param str msg: The message to show in the skipped reason.\n+    :param bool allow_module_level: Allows this function to be called at \n+        module level, skipping the rest of the module. Defaults to False.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+\n+    return skip(msg=msg, allow_module_level=True)\n     \"\"\"Skip an executing test with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n@@ -141,7 +174,7 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         to skip a doctest statically.\n     \"\"\"\n     __tracebackhide__ = True\n-    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+    raise Skipped(msg=msg, allow_module_level=True)\n \n \n @_with_exception(Failed)\ndiff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 79dfb7320..813cac304 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -610,8 +610,9 @@ class Module(nodes.File, PyCollector):\n             raise self.CollectError(\n                 \"Using pytest.skip outside of a test is not allowed. \"\n                 \"To decorate a test function, use the @pytest.mark.skip \"\n-                \"or @pytest.mark.skipif decorators instead, and to skip a \"\n-                \"module use `pytestmark = pytest.mark.{skip,skipif}.\"\n+                \"or @pytest.mark.skipif decorators instead. To skip a \"\n+                \"module, use `pytestmark = pytest.mark.{skip,skipif}` or \"\n+                \"pass `allow_module_level=True` to `pytest.skip`.\"\n             ) from e\n         self.config.pluginmanager.consider_module(mod)\n         return mod\n@@ -996,7 +997,7 @@ class Metafunc:\n         ids: Optional[\n             Union[\n                 Iterable[Union[None, str, float, int, bool]],\n-                Callable[[Any], Optional[object]],\n+                Callable[[object], Optional[str]],\n             ]\n         ] = None,\n         scope: \"Optional[_Scope]\" = None,\n@@ -1122,7 +1123,7 @@ class Metafunc:\n         ids: Optional[\n             Union[\n                 Iterable[Union[None, str, float, int, bool]],\n-                Callable[[Any], Optional[object]],\n+                Callable[[object], Optional[str]],\n             ]\n         ],\n         parameters: Sequence[ParameterSet],\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.9994249999999998,
            "added_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/python.py"
            ],
            "gold_files": [
                "src/_pytest/python.py"
            ],
            "edited_files": [
                "src/_pytest/outcomes.py",
                "src/_pytest/python.py"
            ],
            "edit_outcome": true,
            "lint_outcome": false,
            "test_outcome": null,
            "try": 3
        }
    ],
    "resolved": false
}