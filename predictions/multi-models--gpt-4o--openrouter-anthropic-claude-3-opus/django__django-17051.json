{
    "instance_id": "django__django-17051",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..e1ad138f24 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1847,14 +1847,19 @@ class QuerySet(AltersData):\n                     )\n                 )\n             else:\n-                self._insert(\n+                returned_columns = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE:\n+                    for obj_without_pk, results in zip(item, returned_columns):\n+                        for result, field in zip(results, self.model._meta.db_returning_fields):\n+                            setattr(obj_without_pk, field.attname, result)\n         return inserted_rows\n \n     def _chain(self):\n",
    "model": "openrouter/anthropic/claude-3-opus",
    "cost": 1.681765,
    "added_files": [
        "django/db/models/query.py"
    ],
    "gold_files": [
        "django/db/models/query.py"
    ],
    "edited_files": [
        "django/db/models/query.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "django__django-17051",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..4702996ed3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -792,13 +792,13 @@ class QuerySet(AltersData):\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n                 )\n-                for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        if field != opts.pk:\n-                            setattr(obj_with_pk, field.attname, result)\n-                for obj_with_pk in objs_with_pk:\n-                    obj_with_pk._state.adding = False\n-                    obj_with_pk._state.db = self.db\n+                if returned_columns:\n+                    for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n+                        for result, field in zip(results, opts.db_returning_fields):\n+                            if field != opts.pk:\n+                                setattr(obj_with_pk, field.attname, result)\n+                        obj_with_pk._state.adding = False\n+                        obj_with_pk._state.db = self.db\n             if objs_without_pk:\n                 fields = [f for f in fields if not isinstance(f, AutoField)]\n                 returned_columns = self._batched_insert(\n@@ -812,14 +812,15 @@ class QuerySet(AltersData):\n                 connection = connections[self.db]\n                 if (\n                     connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n+                    and (on_conflict is None or on_conflict == OnConflict.UPDATE)\n                 ):\n                     assert len(returned_columns) == len(objs_without_pk)\n-                for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n-                    for result, field in zip(results, opts.db_returning_fields):\n-                        setattr(obj_without_pk, field.attname, result)\n-                    obj_without_pk._state.adding = False\n-                    obj_without_pk._state.db = self.db\n+                if returned_columns:\n+                    for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n+                        for result, field in zip(results, opts.db_returning_fields):\n+                            setattr(obj_without_pk, field.attname, result)\n+                        obj_without_pk._state.adding = False\n+                        obj_without_pk._state.db = self.db\n \n         return objs\n \n@@ -1837,13 +1838,16 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+            if bulk_return and (on_conflict is None or on_conflict == OnConflict.UPDATE):\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n                         fields=fields,\n                         using=self.db,\n                         returning_fields=self.model._meta.db_returning_fields,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n                     )\n                 )\n             else:\n",
            "model": "gpt-4o",
            "cost": 0.7650850000000001,
            "added_files": [
                "django/db/models/query.py"
            ],
            "gold_files": [
                "django/db/models/query.py"
            ],
            "edited_files": [
                "django/db/models/query.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "django__django-17051",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..e1ad138f24 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1847,14 +1847,19 @@ class QuerySet(AltersData):\n                     )\n                 )\n             else:\n-                self._insert(\n+                returned_columns = self._insert(\n                     item,\n                     fields=fields,\n                     using=self.db,\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=self.model._meta.db_returning_fields if on_conflict == OnConflict.UPDATE else None,\n                 )\n+                if on_conflict == OnConflict.UPDATE:\n+                    for obj_without_pk, results in zip(item, returned_columns):\n+                        for result, field in zip(results, self.model._meta.db_returning_fields):\n+                            setattr(obj_without_pk, field.attname, result)\n         return inserted_rows\n \n     def _chain(self):\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 0.9166799999999999,
            "added_files": [
                "django/db/models/query.py"
            ],
            "gold_files": [
                "django/db/models/query.py"
            ],
            "edited_files": [
                "django/db/models/query.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": true
}