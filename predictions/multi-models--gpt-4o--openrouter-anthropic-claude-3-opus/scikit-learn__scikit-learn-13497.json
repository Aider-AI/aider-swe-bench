{
    "instance_id": "scikit-learn__scikit-learn-13497",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..6a7ce5d5e 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,19 +247,17 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n-        discrete_features = issparse(X)\n-\n-    if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n+        discrete_mask = issparse(X)\n+    elif isinstance(discrete_features, bool):\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n     else:\n         discrete_features = np.asarray(discrete_features)\n-        if discrete_features.dtype != 'bool':\n+        if discrete_features.dtype == 'bool':\n+            discrete_mask = discrete_features\n+        else:\n             discrete_mask = np.zeros(n_features, dtype=bool)\n             discrete_mask[discrete_features] = True\n-        else:\n-            discrete_mask = discrete_features\n \n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\ndiff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex 7ba7d37e8..f6926f05a 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -128,9 +128,9 @@ def test_mutual_info_classif_discrete():\n def test_mutual_info_regression():\n     # We generate sample from multivariate normal distribution, using\n     # transformation from initially uncorrelated variables. The zero\n-    # variables after transformation is selected as the target vector,\n-    # it has the strongest correlation with the variable 2, and\n-    # the weakest correlation with the variable 1.\n+    # variable after transformation is selected as the target vector,\n+    # it has the strongest correlation with variable 2, and\n+    # the weakest correlation with variable 1.\n     T = np.array([\n         [1, 0.5, 2, 1],\n         [0, 1, 0.1, 0.0],\n@@ -174,6 +174,23 @@ def test_mutual_info_classif_mixed():\n \n \n def test_mutual_info_options():\n+    # Test with discrete_features as bool, array and 'auto'\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y = np.array([1, 1, 0])\n+\n+    mi_1 = mutual_info_classif(X, y, discrete_features=True)\n+    mi_2 = mutual_info_classif(X, y, discrete_features=False)\n+    mi_3 = mutual_info_classif(X, y, discrete_features='auto')\n+    mi_4 = mutual_info_classif(X, y, discrete_features=[True, False, True])\n+    mi_5 = mutual_info_classif(X, y, discrete_features=[0, 2])\n+\n+    assert_array_equal(mi_1, mi_3)\n+    assert_array_equal(mi_1, [1.0, 1.0, 1.0])\n+    assert_array_equal(mi_2, [0.0, 0.0, 0.0])\n+    assert_array_equal(mi_4, [1.0, 0.0, 1.0])\n+    assert_array_equal(mi_5, [1.0, 0.0, 1.0])\n+\n+def test_mutual_info_options_old():\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n                   [2, 0, 1],\n@@ -198,3 +215,19 @@ def test_mutual_info_options():\n         assert_array_equal(mi_3, mi_4)\n \n     assert not np.allclose(mi_1, mi_3)\n+def test_mutual_info_options():\n+    # Test with discrete_features as bool, array and 'auto'\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y = np.array([1, 1, 0])\n+\n+    mi_1 = mutual_info_classif(X, y, discrete_features=True)\n+    mi_2 = mutual_info_classif(X, y, discrete_features=False)\n+    mi_3 = mutual_info_classif(X, y, discrete_features='auto')\n+    mi_4 = mutual_info_classif(X, y, discrete_features=[True, False, True])\n+    mi_5 = mutual_info_classif(X, y, discrete_features=[0, 2])\n+\n+    assert_array_equal(mi_1, mi_3)\n+    assert_array_equal(mi_1, [1.0, 1.0, 1.0])\n+    assert_array_equal(mi_2, [0.0, 0.0, 0.0])\n+    assert_array_equal(mi_4, [1.0, 0.0, 1.0])\n+    assert_array_equal(mi_5, [1.0, 0.0, 1.0])\n",
    "model": "openrouter/anthropic/claude-3-opus",
    "cost": 4.586395,
    "added_files": [
        "sklearn/feature_selection/mutual_info_.py",
        "sklearn/feature_selection/tests/test_mutual_info.py"
    ],
    "gold_files": [
        "sklearn/feature_selection/mutual_info_.py"
    ],
    "edited_files": [
        "sklearn/feature_selection/mutual_info_.py",
        "sklearn/feature_selection/tests/test_mutual_info.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "try": 1,
    "tries": 3,
    "all_results": [
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "",
            "model": "gpt-4o",
            "cost": 0.16847,
            "added_files": [],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [],
            "edit_outcome": null,
            "lint_outcome": null,
            "test_outcome": null,
            "try": 1
        },
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..6a7ce5d5e 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,19 +247,17 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n-        discrete_features = issparse(X)\n-\n-    if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n+        discrete_mask = issparse(X)\n+    elif isinstance(discrete_features, bool):\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n     else:\n         discrete_features = np.asarray(discrete_features)\n-        if discrete_features.dtype != 'bool':\n+        if discrete_features.dtype == 'bool':\n+            discrete_mask = discrete_features\n+        else:\n             discrete_mask = np.zeros(n_features, dtype=bool)\n             discrete_mask[discrete_features] = True\n-        else:\n-            discrete_mask = discrete_features\n \n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\ndiff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex 7ba7d37e8..f6926f05a 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -128,9 +128,9 @@ def test_mutual_info_classif_discrete():\n def test_mutual_info_regression():\n     # We generate sample from multivariate normal distribution, using\n     # transformation from initially uncorrelated variables. The zero\n-    # variables after transformation is selected as the target vector,\n-    # it has the strongest correlation with the variable 2, and\n-    # the weakest correlation with the variable 1.\n+    # variable after transformation is selected as the target vector,\n+    # it has the strongest correlation with variable 2, and\n+    # the weakest correlation with variable 1.\n     T = np.array([\n         [1, 0.5, 2, 1],\n         [0, 1, 0.1, 0.0],\n@@ -174,6 +174,23 @@ def test_mutual_info_classif_mixed():\n \n \n def test_mutual_info_options():\n+    # Test with discrete_features as bool, array and 'auto'\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y = np.array([1, 1, 0])\n+\n+    mi_1 = mutual_info_classif(X, y, discrete_features=True)\n+    mi_2 = mutual_info_classif(X, y, discrete_features=False)\n+    mi_3 = mutual_info_classif(X, y, discrete_features='auto')\n+    mi_4 = mutual_info_classif(X, y, discrete_features=[True, False, True])\n+    mi_5 = mutual_info_classif(X, y, discrete_features=[0, 2])\n+\n+    assert_array_equal(mi_1, mi_3)\n+    assert_array_equal(mi_1, [1.0, 1.0, 1.0])\n+    assert_array_equal(mi_2, [0.0, 0.0, 0.0])\n+    assert_array_equal(mi_4, [1.0, 0.0, 1.0])\n+    assert_array_equal(mi_5, [1.0, 0.0, 1.0])\n+\n+def test_mutual_info_options_old():\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n                   [2, 0, 1],\n@@ -198,3 +215,19 @@ def test_mutual_info_options():\n         assert_array_equal(mi_3, mi_4)\n \n     assert not np.allclose(mi_1, mi_3)\n+def test_mutual_info_options():\n+    # Test with discrete_features as bool, array and 'auto'\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y = np.array([1, 1, 0])\n+\n+    mi_1 = mutual_info_classif(X, y, discrete_features=True)\n+    mi_2 = mutual_info_classif(X, y, discrete_features=False)\n+    mi_3 = mutual_info_classif(X, y, discrete_features='auto')\n+    mi_4 = mutual_info_classif(X, y, discrete_features=[True, False, True])\n+    mi_5 = mutual_info_classif(X, y, discrete_features=[0, 2])\n+\n+    assert_array_equal(mi_1, mi_3)\n+    assert_array_equal(mi_1, [1.0, 1.0, 1.0])\n+    assert_array_equal(mi_2, [0.0, 0.0, 0.0])\n+    assert_array_equal(mi_4, [1.0, 0.0, 1.0])\n+    assert_array_equal(mi_5, [1.0, 0.0, 1.0])\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.41669,
            "added_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "",
            "model": "gpt-4o",
            "cost": 0.16893,
            "added_files": [],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [],
            "edit_outcome": null,
            "lint_outcome": null,
            "test_outcome": null,
            "try": 2
        },
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..ce34c04c2 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,19 +247,23 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n-        discrete_features = issparse(X)\n-\n-    if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n-    else:\n-        discrete_features = np.asarray(discrete_features)\n-        if discrete_features.dtype != 'bool':\n+    if isinstance(discrete_features, str):\n+        if discrete_features == 'auto':\n+            discrete_mask = issparse(X)\n+        else:\n+            raise ValueError(\"Invalid string value for discrete_features.\")\n+    elif isinstance(discrete_features, bool):\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n+    elif isinstance(discrete_features, np.ndarray):\n+        if discrete_features.dtype == 'bool':\n+            discrete_mask = discrete_features\n+        elif discrete_features.dtype.kind in ('i', 'u'):\n             discrete_mask = np.zeros(n_features, dtype=bool)\n             discrete_mask[discrete_features] = True\n         else:\n-            discrete_mask = discrete_features\n+            raise ValueError(\"Invalid array dtype for discrete_features.\")\n+    else:\n+        raise TypeError(\"Unexpected type for discrete_features.\")\n \n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\ndiff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex 7ba7d37e8..bbf1fcf73 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -198,3 +198,34 @@ def test_mutual_info_options():\n         assert_array_equal(mi_3, mi_4)\n \n     assert not np.allclose(mi_1, mi_3)\n+def test_mutual_info_classif_discrete_features():\n+    # Test mutual_info_classif with different dtypes for discrete_features\n+    X = np.array([[1, 2, 3], \n+                  [4, 5, 6],\n+                  [7, 8, 9]])\n+    y = np.array([0, 1, 1])\n+\n+    # Test with string 'auto'\n+    mi_auto = mutual_info_classif(X, y, discrete_features='auto')\n+\n+    # Test with bool\n+    mi_bool = mutual_info_classif(X, y, discrete_features=True)\n+    assert_array_equal(mi_auto, mi_bool)\n+\n+    # Test with boolean mask\n+    mask = np.array([False, True, False])\n+    mi_mask = mutual_info_classif(X, y, discrete_features=mask)\n+    assert_array_equal(mi_auto[mask], mi_mask)\n+\n+    # Test with indices\n+    indices = np.array([1])\n+    mi_indices = mutual_info_classif(X, y, discrete_features=indices)\n+    assert_array_equal(mi_auto[indices], mi_indices)\n+\n+    # Test invalid string\n+    assert_raises(ValueError, mutual_info_classif, X, y, \n+                  discrete_features='invalid')\n+\n+    # Test invalid dtype\n+    assert_raises(TypeError, mutual_info_classif, X, y, \n+                  discrete_features=1.0)\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.3146,
            "added_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 2
        },
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "",
            "model": "gpt-4o",
            "cost": 0.168635,
            "added_files": [],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [],
            "edit_outcome": null,
            "lint_outcome": null,
            "test_outcome": null,
            "try": 3
        },
        {
            "instance_id": "scikit-learn__scikit-learn-13497",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..66b89eb2c 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -248,18 +248,20 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     n_samples, n_features = X.shape\n \n     if discrete_features == 'auto':\n-        discrete_features = issparse(X)\n-\n-    if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n+        discrete_mask = issparse(X)\n+    elif isinstance(discrete_features, (list, np.ndarray)):\n+        if len(discrete_features) != n_features:\n+            raise ValueError(\"Length of discrete_features must match number of features\")\n+        discrete_mask = np.zeros(n_features, dtype=bool)\n+        discrete_mask[discrete_features] = True\n+    elif isinstance(discrete_features, bool):\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n     else:\n-        discrete_features = np.asarray(discrete_features)\n-        if discrete_features.dtype != 'bool':\n-            discrete_mask = np.zeros(n_features, dtype=bool)\n-            discrete_mask[discrete_features] = True\n-        else:\n-            discrete_mask = discrete_features\n+        raise ValueError(\"discrete_features must be 'auto', a bool, or array-like\")\n+\n+    continuous_mask = ~discrete_mask\n+    if np.any(continuous_mask) and issparse(X):\n+        raise ValueError(\"Sparse matrix `X` can't have continuous features.\")\n \n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\ndiff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex 7ba7d37e8..9e862562f 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -198,3 +198,41 @@ def test_mutual_info_options():\n         assert_array_equal(mi_3, mi_4)\n \n     assert not np.allclose(mi_1, mi_3)\n+def test_mutual_info_options():\n+    # Test with explicit options for `discrete_features`\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y_reg = np.array([1, 2, 3])\n+    y_clf = np.array([0, 1, 2])\n+\n+    mi_reg_indices = mutual_info_regression(X, y_reg, discrete_features=[0, 2])\n+    mi_reg_mask = mutual_info_regression(X, y_reg, discrete_features=[False, True, False])\n+    mi_reg_bool = mutual_info_regression(X, y_reg, discrete_features=True)\n+\n+    mi_clf_indices = mutual_info_classif(X, y_clf, discrete_features=[0, 2])\n+    mi_clf_mask = mutual_info_classif(X, y_clf, discrete_features=[False, True, False])\n+    mi_clf_bool = mutual_info_classif(X, y_clf, discrete_features=True)\n+\n+    assert_array_equal(mi_reg_indices, mi_reg_mask)\n+    assert_array_equal(mi_reg_bool, [1.0, 1.0, 1.0])\n+\n+    assert_array_equal(mi_clf_indices, mi_clf_mask)\n+    assert_array_equal(mi_clf_bool, [1.0, 1.0, 1.0])\n+def test_mutual_info_options():\n+    # Test with explicit options for `discrete_features`\n+    X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    y_reg = np.array([1, 2, 3])\n+    y_clf = np.array([0, 1, 2])\n+\n+    mi_reg_indices = mutual_info_regression(X, y_reg, discrete_features=[0, 2])\n+    mi_reg_mask = mutual_info_regression(X, y_reg, discrete_features=[False, True, False])\n+    mi_reg_bool = mutual_info_regression(X, y_reg, discrete_features=True)\n+\n+    mi_clf_indices = mutual_info_classif(X, y_clf, discrete_features=[0, 2])\n+    mi_clf_mask = mutual_info_classif(X, y_clf, discrete_features=[False, True, False])\n+    mi_clf_bool = mutual_info_classif(X, y_clf, discrete_features=True)\n+\n+    assert_array_equal(mi_reg_indices, mi_reg_mask)\n+    assert_array_equal(mi_reg_bool, [1.0, 1.0, 1.0])\n+\n+    assert_array_equal(mi_clf_indices, mi_clf_mask)\n+    assert_array_equal(mi_clf_bool, [1.0, 1.0, 1.0])\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.3490700000000002,
            "added_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "gold_files": [
                "sklearn/feature_selection/mutual_info_.py"
            ],
            "edited_files": [
                "sklearn/feature_selection/mutual_info_.py",
                "sklearn/feature_selection/tests/test_mutual_info.py"
            ],
            "edit_outcome": false,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 3
        }
    ],
    "resolved": false
}