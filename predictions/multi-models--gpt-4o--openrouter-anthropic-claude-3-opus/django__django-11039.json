{
    "instance_id": "django__django-11039",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..5779810d09 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations that can rollback DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 0e8fa9fdd1..a30847715a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -603,10 +603,26 @@ class MigrateTests(MigrationTestBase):\n         # Cleanup by unmigrating everything\n         call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n     def test_sqlmigrate_for_non_atomic_migration(self):\n         \"\"\"\n-        Transaction wrappers aren't shown for non-atomic migrations.\n+        Transaction wrappers aren't shown for non-atomic migrations even if\n+        the database supports transactional DDL.\n         \"\"\"\n         out = io.StringIO()\n         call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n",
    "model": "openrouter/anthropic/claude-3-opus",
    "cost": 1.5508800000000003,
    "added_files": [
        "django/core/management/commands/sqlmigrate.py",
        "tests/migrations/test_commands.py"
    ],
    "gold_files": [
        "django/core/management/commands/sqlmigrate.py"
    ],
    "edited_files": [
        "django/core/management/commands/sqlmigrate.py",
        "tests/migrations/test_commands.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "django__django-11039",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..b51d1739a4 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -56,7 +56,7 @@ class Command(BaseCommand):\n         targets = [(app_label, migration.name)]\n \n         # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 0e8fa9fdd1..ed271653c2 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -95,6 +95,28 @@ class MigrateTests(MigrationTestBase):\n             call_command('migrate', app_label='migrations', migration_name='nonexistent')\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_initial_false\"})\n+    def test_migrate_fake_initial(self):\n+        \"\"\"\n+        `Migration.initial = False` skips fake-initial detection.\n+        \"\"\"\n+        # Make sure no tables are created\n+        self.assertTableNotExists(\"migrations_author\")\n+        self.assertTableNotExists(\"migrations_tribble\")\n+        # Run the migrations to 0001 only\n+        call_command(\"migrate\", \"migrations\", \"0001\", verbosity=0)\n+        # Fake rollback\n+        call_command(\"migrate\", \"migrations\", \"zero\", fake=True, verbosity=0)\n+        # Make sure fake-initial detection does not run\n+        with self.assertRaises(DatabaseError):\n+            call_command(\"migrate\", \"migrations\", \"0001\", fake_initial=True, verbosity=0)\n+\n+        call_command(\"migrate\", \"migrations\", \"0001\", fake=True, verbosity=0)\n+        # Real rollback\n+        call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n+        # Make sure it's all gone\n+        self.assertTableNotExists(\"migrations_author\")\n+        self.assertTableNotExists(\"migrations_tribble\")\n+        self.assertTableNotExists(\"migrations_book\")\n     def test_migrate_initial_false(self):\n         \"\"\"\n         `Migration.initial = False` skips fake-initial detection.\n@@ -118,10 +140,21 @@ class MigrateTests(MigrationTestBase):\n         self.assertTableNotExists(\"migrations_tribble\")\n         self.assertTableNotExists(\"migrations_book\")\n \n-    @override_settings(\n-        MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"},\n-        DATABASE_ROUTERS=['migrations.routers.TestRouter'],\n-    )\n+    @mock.patch('django.db.backends.base.features.BaseDatabaseFeatures.can_rollback_ddl', False)\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n+    def test_sqlmigrate_for_non_atomic_migration_no_rollback(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for non-atomic migrations or when\n+        the database doesn't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     def test_migrate_fake_initial(self):\n         \"\"\"\n         --fake-initial only works if all tables created in the initial\n",
            "model": "gpt-4o",
            "cost": 0.677085,
            "added_files": [
                "django/core/management/commands/sqlmigrate.py",
                "tests/migrations/test_commands.py"
            ],
            "gold_files": [
                "django/core/management/commands/sqlmigrate.py"
            ],
            "edited_files": [
                "django/core/management/commands/sqlmigrate.py",
                "tests/migrations/test_commands.py"
            ],
            "edit_outcome": false,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "django__django-11039",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..5779810d09 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations that can rollback DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\ndiff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex 0e8fa9fdd1..a30847715a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -603,10 +603,26 @@ class MigrateTests(MigrationTestBase):\n         # Cleanup by unmigrating everything\n         call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n     def test_sqlmigrate_for_non_atomic_migration(self):\n         \"\"\"\n-        Transaction wrappers aren't shown for non-atomic migrations.\n+        Transaction wrappers aren't shown for non-atomic migrations even if\n+        the database supports transactional DDL.\n         \"\"\"\n         out = io.StringIO()\n         call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 0.8737950000000001,
            "added_files": [
                "django/core/management/commands/sqlmigrate.py",
                "tests/migrations/test_commands.py"
            ],
            "gold_files": [
                "django/core/management/commands/sqlmigrate.py"
            ],
            "edited_files": [
                "django/core/management/commands/sqlmigrate.py",
                "tests/migrations/test_commands.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": true
}