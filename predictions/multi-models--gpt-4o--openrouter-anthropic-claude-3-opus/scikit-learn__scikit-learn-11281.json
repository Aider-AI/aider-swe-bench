{
    "instance_id": "scikit-learn__scikit-learn-11281",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..fac536158 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -74,6 +74,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     def __init__(self, n_components, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n                  verbose, verbose_interval):\n+        self.labels_ = None\n         self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n@@ -242,6 +243,21 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         return self\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape = [n_samples, n_features]\n+\n+        Returns\n+        -------\n+        labels : array, shape = (n_samples,) component memberships\n+        \"\"\"\n+        self.fit(X, y)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n+\n     def _e_step(self, X):\n         \"\"\"E step.\n \ndiff --git a/sklearn/mixture/gmm.py b/sklearn/mixture/gmm.py\nindex b3c231314..037330445 100644\n--- a/sklearn/mixture/gmm.py\n+++ b/sklearn/mixture/gmm.py\n@@ -260,6 +260,7 @@ class _GMMBase(BaseEstimator):\n                  random_state=None, tol=1e-3, min_covar=1e-3,\n                  n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                  verbose=0):\n+        self.labels_ = None\n         self.n_components = n_components\n         self.covariance_type = covariance_type\n         self.tol = tol\n@@ -372,7 +373,9 @@ class _GMMBase(BaseEstimator):\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n         logprob, responsibilities = self.score_samples(X)\n-        return responsibilities.argmax(axis=1)\n+        labels = responsibilities.argmax(axis=1)\n+        self.labels_ = labels\n+        return labels\n \n     def predict_proba(self, X):\n         \"\"\"Predict posterior probability of data under each Gaussian\n@@ -450,7 +453,8 @@ class _GMMBase(BaseEstimator):\n         -------\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n-        return self._fit(X, y).argmax(axis=1)\n+        self.labels_ = self._fit(X, y).argmax(axis=1)\n+        return self.labels_\n \n     def _fit(self, X, y=None, do_prediction=False):\n         \"\"\"Estimate model parameters with the EM algorithm.\n",
    "model": "gpt-4o",
    "cost": 0.25319,
    "added_files": [
        "sklearn/mixture/base.py",
        "sklearn/mixture/gmm.py"
    ],
    "gold_files": [
        "sklearn/mixture/base.py"
    ],
    "edited_files": [
        "sklearn/mixture/base.py",
        "sklearn/mixture/gmm.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "scikit-learn__scikit-learn-11281",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..fac536158 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -74,6 +74,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     def __init__(self, n_components, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n                  verbose, verbose_interval):\n+        self.labels_ = None\n         self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n@@ -242,6 +243,21 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         return self\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape = [n_samples, n_features]\n+\n+        Returns\n+        -------\n+        labels : array, shape = (n_samples,) component memberships\n+        \"\"\"\n+        self.fit(X, y)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n+\n     def _e_step(self, X):\n         \"\"\"E step.\n \ndiff --git a/sklearn/mixture/gmm.py b/sklearn/mixture/gmm.py\nindex b3c231314..037330445 100644\n--- a/sklearn/mixture/gmm.py\n+++ b/sklearn/mixture/gmm.py\n@@ -260,6 +260,7 @@ class _GMMBase(BaseEstimator):\n                  random_state=None, tol=1e-3, min_covar=1e-3,\n                  n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                  verbose=0):\n+        self.labels_ = None\n         self.n_components = n_components\n         self.covariance_type = covariance_type\n         self.tol = tol\n@@ -372,7 +373,9 @@ class _GMMBase(BaseEstimator):\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n         logprob, responsibilities = self.score_samples(X)\n-        return responsibilities.argmax(axis=1)\n+        labels = responsibilities.argmax(axis=1)\n+        self.labels_ = labels\n+        return labels\n \n     def predict_proba(self, X):\n         \"\"\"Predict posterior probability of data under each Gaussian\n@@ -450,7 +453,8 @@ class _GMMBase(BaseEstimator):\n         -------\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n-        return self._fit(X, y).argmax(axis=1)\n+        self.labels_ = self._fit(X, y).argmax(axis=1)\n+        return self.labels_\n \n     def _fit(self, X, y=None, do_prediction=False):\n         \"\"\"Estimate model parameters with the EM algorithm.\n",
            "model": "gpt-4o",
            "cost": 0.25319,
            "added_files": [
                "sklearn/mixture/base.py",
                "sklearn/mixture/gmm.py"
            ],
            "gold_files": [
                "sklearn/mixture/base.py"
            ],
            "edited_files": [
                "sklearn/mixture/base.py",
                "sklearn/mixture/gmm.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": true
}