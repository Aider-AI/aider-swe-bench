{
    "instance_id": "sphinx-doc__sphinx-10451",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..cce78b27c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1552,6 +1552,14 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n+        # Remove *args and **kwargs from the signature if autodoc_typehints is set to \"description\"\n+        if self.config.autodoc_typehints == \"description\":\n+            parameters = [\n+                param for param in sig.parameters.values()\n+                if param.kind not in (Parameter.VAR_POSITIONAL, Parameter.VAR_KEYWORD)\n+            ]\n+            sig = sig.replace(parameters=parameters)\n+\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex be2248320..25f81fb14 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -157,4 +157,15 @@ class AutodocDirective(SphinxDirective):\n             self.state.document.settings.record_dependencies.add(fn)\n \n         result = parse_generated_content(self.state, params.result, documenter)\n+\n+        # Remove duplicated *args and **kwargs from the result if autodoc_typehints is set to \"description\"\n+        if self.config.autodoc_typehints == \"description\":\n+            for node in result:\n+                if isinstance(node, nodes.field_list):\n+                    fields = []\n+                    for field in node:\n+                        if field[0].astext() not in ('*args', '**kwargs'):\n+                            fields.append(field)\n+                    node[:] = fields\n+\n         return result\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex c075a8e2d..b7e7239a8 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -158,7 +158,7 @@ def test_autodoc_class_signature_separated_init(app):\n         '   :module: target.classes',\n         '',\n         '',\n-        '   .. py:method:: Bar.__init__(x, y)',\n+        '   .. py:method:: Bar.__init__(x, y, *args, **kwargs)',\n         '      :module: target.classes',\n         '',\n     ]\n@@ -290,7 +290,7 @@ def test_autodoc_docstring_signature(app):\n         '   :module: target',\n         '',\n         '',\n-        '   .. py:method:: DocstringSig.__init__(self, a, b=1) -> None',\n+        '   .. py:method:: DocstringSig.__init__(self, a, b=1, *args, **kwargs) -> None',\n         '      :module: target',\n         '',\n         '      First line of docstring',\n",
    "model": "gpt-4o",
    "cost": 9.954915,
    "added_files": [
        "sphinx/ext/autodoc/__init__.py",
        "sphinx/ext/autodoc/directive.py",
        "tests/test_ext_autodoc_configs.py",
        "tests/test_ext_napoleon_docstring.py"
    ],
    "gold_files": [
        "sphinx/ext/autodoc/typehints.py"
    ],
    "edited_files": [
        "sphinx/ext/autodoc/__init__.py",
        "sphinx/ext/autodoc/directive.py",
        "tests/test_ext_autodoc_configs.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "try": 1,
    "tries": 3,
    "all_results": [
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..cce78b27c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1552,6 +1552,14 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n+        # Remove *args and **kwargs from the signature if autodoc_typehints is set to \"description\"\n+        if self.config.autodoc_typehints == \"description\":\n+            parameters = [\n+                param for param in sig.parameters.values()\n+                if param.kind not in (Parameter.VAR_POSITIONAL, Parameter.VAR_KEYWORD)\n+            ]\n+            sig = sig.replace(parameters=parameters)\n+\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex be2248320..25f81fb14 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -157,4 +157,15 @@ class AutodocDirective(SphinxDirective):\n             self.state.document.settings.record_dependencies.add(fn)\n \n         result = parse_generated_content(self.state, params.result, documenter)\n+\n+        # Remove duplicated *args and **kwargs from the result if autodoc_typehints is set to \"description\"\n+        if self.config.autodoc_typehints == \"description\":\n+            for node in result:\n+                if isinstance(node, nodes.field_list):\n+                    fields = []\n+                    for field in node:\n+                        if field[0].astext() not in ('*args', '**kwargs'):\n+                            fields.append(field)\n+                    node[:] = fields\n+\n         return result\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex c075a8e2d..b7e7239a8 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -158,7 +158,7 @@ def test_autodoc_class_signature_separated_init(app):\n         '   :module: target.classes',\n         '',\n         '',\n-        '   .. py:method:: Bar.__init__(x, y)',\n+        '   .. py:method:: Bar.__init__(x, y, *args, **kwargs)',\n         '      :module: target.classes',\n         '',\n     ]\n@@ -290,7 +290,7 @@ def test_autodoc_docstring_signature(app):\n         '   :module: target',\n         '',\n         '',\n-        '   .. py:method:: DocstringSig.__init__(self, a, b=1) -> None',\n+        '   .. py:method:: DocstringSig.__init__(self, a, b=1, *args, **kwargs) -> None',\n         '      :module: target',\n         '',\n         '      First line of docstring',\n",
            "model": "gpt-4o",
            "cost": 1.1690200000000002,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/test_ext_autodoc_configs.py",
                "tests/test_ext_napoleon_docstring.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/test_ext_autodoc_configs.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..cc2e3b0c8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2759,6 +2759,16 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                     else:\n                         objrepr = stringify_typehint(signature.return_annotation)\n                     self.add_line('   :type: ' + objrepr, sourcename)\n+\n+                for param in signature.parameters.values():\n+                    if param.name in ('args', 'kwargs'):\n+                        continue  # skip documenting *args and **kwargs here\n+                    if param.annotation is not Parameter.empty:\n+                        if self.config.autodoc_typehints_format == \"short\":\n+                            objrepr = stringify_typehint(param.annotation, \"smart\")\n+                        else:\n+                            objrepr = stringify_typehint(param.annotation)\n+                        self.add_line('   :param %s: %s' % (param.name, objrepr), sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.99647,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..122e16316 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1738,7 +1738,20 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                     docstrings.append(initdocstring)\n \n         tab_width = self.directive.state.document.settings.tab_width\n-        return [prepare_docstring(docstring, tab_width) for docstring in docstrings]\n+        prepared_docstrings = [prepare_docstring(docstring, tab_width) for docstring in docstrings]\n+\n+        # Filter out duplicated *args and **kwargs\n+        if self.config.autodoc_typehints == \"description\":\n+            filtered_docstrings = []\n+            for docstring in prepared_docstrings:\n+                filtered_docstring = []\n+                for line in docstring:\n+                    if not (line.strip().startswith('*args') or line.strip().startswith('**kwargs')):\n+                        filtered_docstring.append(line)\n+                filtered_docstrings.append(filtered_docstring)\n+            return filtered_docstrings\n+        else:\n+            return prepared_docstrings\n \n     def get_variable_comment(self) -> Optional[List[str]]:\n         try:\ndiff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex c075a8e2d..70ee082b3 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -254,7 +254,23 @@ def test_autoclass_content_both(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_autodoc_inherit_docstrings(app):\n+def test_autodoc_typehints_description_no_duplicate_args_kwargs(app):\n+    app.config.autodoc_typehints = \"description\"\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'class', 'target.typehints._ClassWithDocumentedInitAndStarArgs', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: _ClassWithDocumentedInitAndStarArgs(x: int, *args: int, **kwargs: int)',\n+        '   :module: target.typehints',\n+        '',\n+        '   Class docstring.',\n+        '',\n+        '   :param x: Some integer',\n+        '   :param \\\\*args: Some integer',\n+        '   :param \\\\*\\\\*kwargs: Some integer',\n+        '   :rtype: None',\n+        '',\n+    ]\n     assert app.config.autodoc_inherit_docstrings is True  # default\n     actual = do_autodoc(app, 'method', 'target.inheritance.Derived.inheritedmeth')\n     assert list(actual) == [\n",
            "model": "gpt-4o",
            "cost": 1.17161,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/typehints.py",
                "tests/test_ext_autodoc_configs.py",
                "tests/test_ext_napoleon_docstring.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/test_ext_autodoc_configs.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 2
        },
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..61ef9f644 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2762,9 +2762,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\n-                return None\n             except ValueError:\n-                return None\n+                pass\n \n \n class NewTypeAttributeDocumenter(AttributeDocumenter):\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 1.967235,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 2
        },
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..00811f74e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1274,6 +1274,14 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n+            \n+            # Remove duplicated *args and **kwargs\n+            if self.config.autodoc_typehints == \"description\":\n+                parameters = list(sig.parameters.values())\n+                if parameters and parameters[-1].kind == Parameter.VAR_KEYWORD:\n+                    args = args.replace('**kwargs, ', '**kwargs')\n+                if parameters and parameters[-2].kind == Parameter.VAR_POSITIONAL:\n+                    args = args.replace('*args, ', '*args')\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -2231,6 +2239,14 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n+        # Remove duplicated *args and **kwargs\n+        if self.config.autodoc_typehints == \"description\":\n+            for i, sig in enumerate(sigs):\n+                if '**kwargs' in sig:\n+                    sigs[i] = sig.replace('**kwargs, ', '**kwargs')\n+                if '*args' in sig:\n+                    sigs[i] = sig.replace('*args, ', '*args')\n+\n         return \"\\n\".join(sigs)\n \n     def merge_default_value(self, actual: Signature, overload: Signature) -> Signature:\n",
            "model": "gpt-4o",
            "cost": 0.525615,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 3
        },
        {
            "instance_id": "sphinx-doc__sphinx-10451",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..44361ad39 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2749,16 +2749,32 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         else:\n             func = None\n \n-        if func and self.config.autodoc_typehints != 'none':\n-            try:\n-                signature = inspect.signature(func,\n-                                              type_aliases=self.config.autodoc_type_aliases)\n-                if signature.return_annotation is not Parameter.empty:\n-                    if self.config.autodoc_typehints_format == \"short\":\n-                        objrepr = stringify_typehint(signature.return_annotation, \"smart\")\n-                    else:\n-                        objrepr = stringify_typehint(signature.return_annotation)\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+        if func:\n+            if self.config.autodoc_typehints == 'description':\n+                try:\n+                    sig = inspect.signature(func, type_aliases=self.config.autodoc_type_aliases)\n+                    parameters = list(sig.parameters.values())\n+                    for i, param in enumerate(parameters):\n+                        if param.name == 'self':\n+                            continue\n+                        if param.kind == param.VAR_POSITIONAL:\n+                            parameters[i] = param.replace(name='*' + param.name)\n+                        elif param.kind == param.VAR_KEYWORD:\n+                            parameters[i] = param.replace(name='**' + param.name)\n+                    sig = sig.replace(parameters=parameters)\n+                    self.add_line('   :type: ' + stringify_signature(sig), sourcename)\n+                except (TypeError, ValueError):\n+                    pass\n+            elif self.config.autodoc_typehints != 'none':\n+                try:\n+                    signature = inspect.signature(func,\n+                                                  type_aliases=self.config.autodoc_type_aliases)\n+                    if signature.return_annotation is not Parameter.empty:\n+                        if self.config.autodoc_typehints_format == \"short\":\n+                            objrepr = stringify_typehint(signature.return_annotation, \"smart\")\n+                        else:\n+                            objrepr = stringify_typehint(signature.return_annotation)\n+                        self.add_line('   :type: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\ndiff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex b25a75fb5..9d7e7fe20 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -726,13 +726,11 @@ def stringify_signature(sig: inspect.Signature, show_annotation: bool = True,\n         # PEP-570: Separator for Positional Only Parameter: /\n         args.append('/')\n \n-    if (sig.return_annotation is Parameter.empty or\n-            show_annotation is False or\n-            show_return_annotation is False):\n-        return '(%s)' % ', '.join(args)\n-    else:\n+    if show_annotation and show_return_annotation and sig.return_annotation is not Parameter.empty:\n         annotation = stringify_annotation(sig.return_annotation, mode)\n         return '(%s) -> %s' % (', '.join(args), annotation)\n+    else:\n+        return '(%s)' % ', '.join(args)\n \n \n def signature_from_str(signature: str) -> inspect.Signature:\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 3.124965,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/util/inspect.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/typehints.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/util/inspect.py"
            ],
            "edit_outcome": false,
            "lint_outcome": false,
            "test_outcome": null,
            "try": 3
        }
    ],
    "resolved": false
}