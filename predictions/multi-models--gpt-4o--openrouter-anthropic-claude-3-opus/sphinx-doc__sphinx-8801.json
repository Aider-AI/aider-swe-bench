{
    "instance_id": "sphinx-doc__sphinx-8801",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..e4a38bf62 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2453,6 +2453,15 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n             self.object = self.object.value\n         if self.parent:\n             self.update_annotations(self.parent)\n+            if not ret and self.objpath:\n+                # An attribute not defined in __annotations__ of the class.\n+                # But it may be defined in __annotations__ of a parent class.\n+                for cls in self.parent.__mro__:\n+                    if self.objpath[-1] in getattr(cls, '__annotations__', {}):\n+                        # The attribute is defined in a parent class.\n+                        # Suppress the ImportError and treat it as a valid attribute.\n+                        ret = True\n+                        break\n \n         return ret\n \ndiff --git a/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\nnew file mode 100644\nindex 000000000..5498f60be\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\n@@ -0,0 +1,8 @@\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..db1e93239 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -191,3 +191,28 @@ def test_class_alias(app):\n         '',\n         '   alias of :class:`target.classes.Foo`',\n     ]\n+def test_autoclass_inherited_member_with_annotation_only(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n",
    "model": "openrouter/anthropic/claude-3-opus",
    "cost": 9.361385,
    "added_files": [
        "sphinx/ext/autodoc/__init__.py",
        "sphinx/ext/autodoc/directive.py",
        "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
        "tests/test_ext_autodoc_autoclass.py"
    ],
    "gold_files": [
        "sphinx/ext/autodoc/importer.py"
    ],
    "edited_files": [
        "sphinx/ext/autodoc/__init__.py",
        "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
        "tests/test_ext_autodoc_autoclass.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "try": 1,
    "tries": 3,
    "all_results": [
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..27e894b2e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -686,7 +686,8 @@ class Documenter:\n                         return False\n                     elif name in self.get_attr(cls, '__annotations__', {}):\n                         return False\n-                    elif isinstance(obj, ObjectMember) and obj.class_ is cls:\n+                    elif name in self.get_attr(cls, '__annotations__', {}) or \\\n+                         isinstance(obj, ObjectMember) and obj.class_ is cls:\n                         return False\n \n             return False\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..162da3a24 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,7 +106,28 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n-def test_decorators(app):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {'members': True, 'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n         '',\n",
            "model": "gpt-4o",
            "cost": 0.84386,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "edit_outcome": false,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..e4a38bf62 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2453,6 +2453,15 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n             self.object = self.object.value\n         if self.parent:\n             self.update_annotations(self.parent)\n+            if not ret and self.objpath:\n+                # An attribute not defined in __annotations__ of the class.\n+                # But it may be defined in __annotations__ of a parent class.\n+                for cls in self.parent.__mro__:\n+                    if self.objpath[-1] in getattr(cls, '__annotations__', {}):\n+                        # The attribute is defined in a parent class.\n+                        # Suppress the ImportError and treat it as a valid attribute.\n+                        ret = True\n+                        break\n \n         return ret\n \ndiff --git a/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\nnew file mode 100644\nindex 000000000..5498f60be\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\n@@ -0,0 +1,8 @@\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..db1e93239 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -191,3 +191,28 @@ def test_class_alias(app):\n         '',\n         '   alias of :class:`target.classes.Foo`',\n     ]\n+def test_autoclass_inherited_member_with_annotation_only(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 2.1062250000000002,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..91409cf62 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -728,6 +728,12 @@ class Documenter:\n                 # hack for ClassDocumenter to inject docstring via ObjectMember\n                 doc = obj.docstring\n \n+            # Check if the member is an annotation-only member in a superclass\n+            if (not doc and isinstance(member, ObjectMember) and\n+                    member.class_ != self.object and\n+                    member.class_ is not None):\n+                doc = True\n+\n             has_doc = bool(doc)\n \n             metadata = extract_metadata(doc)\n",
            "model": "gpt-4o",
            "cost": 0.48951500000000003,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 2
        },
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..1113248a1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2453,6 +2453,9 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n             self.object = self.object.value\n         if self.parent:\n             self.update_annotations(self.parent)\n+            for cls in inspect.getmro(self.parent):\n+                if cls != self.parent:\n+                    self.update_annotations(cls)\n \n         return ret\n \ndiff --git a/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\nnew file mode 100644\nindex 000000000..478373fb6\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\n@@ -0,0 +1,24 @@\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..e9dc865e5 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -191,3 +191,78 @@ def test_class_alias(app):\n         '',\n         '   alias of :class:`target.classes.Foo`',\n     ]\n+def test_autoclass_inherited_member_with_uninitialized_attributes(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+def test_autoclass_inherited_member_with_uninitialized_attributes(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+def test_autoclass_inherited_member_with_uninitialized_attributes(app):\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 2.813145,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 2
        },
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..4c095a9f3 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -740,51 +740,52 @@ class Documenter:\n             else:\n                 isprivate = membername.startswith('_')\n \n-            keep = False\n-            if ismock(member):\n-                # mocked module or object\n-                pass\n-            elif self.options.exclude_members and membername in self.options.exclude_members:\n-                # remove members given by exclude-members\n-                keep = False\n-            elif want_all and special_member_re.match(membername):\n-                # special __methods__\n-                if self.options.special_members and membername in self.options.special_members:\n-                    if membername == '__doc__':\n-                        keep = False\n-                    elif is_filtered_inherited_member(membername, obj):\n-                        keep = False\n-                    else:\n-                        keep = has_doc or self.options.undoc_members\n-                else:\n+            keep = has_doc or self.options.undoc_members\n+            if not keep:\n+                if ismock(member):\n+                    # mocked module or object\n+                    pass\n+                elif self.options.exclude_members and membername in self.options.exclude_members:\n+                    # remove members given by exclude-members\n                     keep = False\n-            elif (namespace, membername) in attr_docs:\n-                if want_all and isprivate:\n-                    if self.options.private_members is None:\n+                elif want_all and special_member_re.match(membername):\n+                    # special __methods__\n+                    if self.options.special_members and membername in self.options.special_members:\n+                        if membername == '__doc__':\n+                            keep = False\n+                        elif is_filtered_inherited_member(membername, obj):\n+                            keep = False\n+                        else:\n+                            keep = has_doc or self.options.undoc_members\n+                    else:\n                         keep = False\n+                elif (namespace, membername) in attr_docs:\n+                    if want_all and isprivate:\n+                        if self.options.private_members is None:\n+                            keep = False\n+                        else:\n+                            keep = membername in self.options.private_members\n+                    else:\n+                        # keep documented attributes\n+                        keep = True\n+                    isattr = True\n+                elif want_all and isprivate:\n+                    if has_doc or self.options.undoc_members:\n+                        if self.options.private_members is None:\n+                            keep = False\n+                        elif is_filtered_inherited_member(membername, obj):\n+                            keep = False\n+                        else:\n+                            keep = membername in self.options.private_members\n                     else:\n-                        keep = membername in self.options.private_members\n-                else:\n-                    # keep documented attributes\n-                    keep = True\n-                isattr = True\n-            elif want_all and isprivate:\n-                if has_doc or self.options.undoc_members:\n-                    if self.options.private_members is None:\n                         keep = False\n-                    elif is_filtered_inherited_member(membername, obj):\n+                else:\n+                    if (self.options.members is ALL and\n+                            is_filtered_inherited_member(membername, obj)):\n                         keep = False\n                     else:\n-                        keep = membername in self.options.private_members\n-                else:\n-                    keep = False\n-            else:\n-                if (self.options.members is ALL and\n-                        is_filtered_inherited_member(membername, obj)):\n-                    keep = False\n-                else:\n-                    # ignore undocumented members if :undoc-members: is not given\n-                    keep = has_doc or self.options.undoc_members\n+                        # ignore undocumented members if :undoc-members: is not given\n+                        keep = has_doc or self.options.undoc_members\n \n             if isinstance(obj, ObjectMember) and obj.skipped:\n                 # forcedly skipped member (ex. a module attribute not defined in __all__)\ndiff --git a/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\nnew file mode 100644\nindex 000000000..5498f60be\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\n@@ -0,0 +1,8 @@\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..b67d534f6 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -175,6 +175,30 @@ def test_show_inheritance_for_subclass_of_generic_type(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_member(app):\n+    options = {'members': True, 'inherited-members': True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n def test_class_alias(app):\n     def autodoc_process_docstring(*args):\n         \"\"\"A handler always raises an error.\n",
            "model": "gpt-4o",
            "cost": 0.865645,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 3
        },
        {
            "instance_id": "sphinx-doc__sphinx-8801",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..0c89a4b7e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2326,11 +2326,11 @@ class UninitializedInstanceAttributeMixin(DataDocumenterMixinBase):\n \n     def is_uninitialized_instance_attribute(self, parent: Any) -> bool:\n         \"\"\"Check the subject is an annotation only attribute.\"\"\"\n-        annotations = get_type_hints(parent, None, self.config.autodoc_type_aliases)\n-        if self.objpath[-1] in annotations:\n-            return True\n-        else:\n-            return False\n+        for cls in inspect.getmro(parent):\n+            annotations = get_type_hints(cls, None, self.config.autodoc_type_aliases)\n+            if self.objpath[-1] in annotations:\n+                return True\n+        return False\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         \"\"\"Check the exisitence of uninitialized instance attribute when failed to import\ndiff --git a/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\nnew file mode 100644\nindex 000000000..5498f60be\n--- /dev/null\n+++ b/tests/roots/test-ext-autodoc/target/uninitialized_attributes.py\n@@ -0,0 +1,8 @@\n+class Foo:\n+    \"\"\"docstring\"\"\"\n+    attr1: int  #: docstring\n+\n+\n+class Bar(Foo):\n+    \"\"\"docstring\"\"\"\n+    attr2: str  #: docstring\ndiff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 488b72263..536bd70f0 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -191,3 +191,29 @@ def test_class_alias(app):\n         '',\n         '   alias of :class:`target.classes.Foo`',\n     ]\n+def test_autoclass_inherited_member_with_uninitialized_attributes(app):\n+    app.config.autodoc_inherit_docstrings = True\n+    options = {\"members\": None,\n+               \"undoc-members\": None,\n+               \"inherited-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '   docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 2.242995,
            "added_files": [
                "sphinx/ext/autodoc/__init__.py",
                "sphinx/ext/autodoc/directive.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "gold_files": [
                "sphinx/ext/autodoc/importer.py"
            ],
            "edited_files": [
                "sphinx/ext/autodoc/__init__.py",
                "tests/roots/test-ext-autodoc/target/uninitialized_attributes.py",
                "tests/test_ext_autodoc_autoclass.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 3
        }
    ],
    "resolved": false
}