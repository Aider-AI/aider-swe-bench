{
    "instance_id": "scikit-learn__scikit-learn-10949",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..fa26b49ba 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -15,6 +15,7 @@ import numpy as np\n import scipy.sparse as sp\n from scipy import __version__ as scipy_version\n from distutils.version import LooseVersion\n+import pandas as pd\n \n from numpy.core.numeric import ComplexWarning\n \n@@ -495,7 +496,16 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n-    if sp.issparse(array):\n+    if isinstance(array, pd.DataFrame):\n+        dtype_orig = array.dtypes.values\n+        array = array.to_numpy(dtype=dtype)\n+        if warn_on_dtype:\n+            for orig_dtype, new_dtype in zip(dtype_orig, array.dtypes):\n+                if orig_dtype != new_dtype:\n+                    msg = (\"Data with input dtype {} was converted to {}{}.\"\n+                           .format(orig_dtype, new_dtype, context))\n+                    warnings.warn(msg, DataConversionWarning)\n+    elif sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse,\n                                       dtype=dtype, copy=copy,\n",
    "model": "gpt-4o",
    "cost": 0.235345,
    "added_files": [
        "sklearn/utils/validation.py"
    ],
    "gold_files": [
        "sklearn/utils/validation.py"
    ],
    "edited_files": [
        "sklearn/utils/validation.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "scikit-learn__scikit-learn-10949",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..fa26b49ba 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -15,6 +15,7 @@ import numpy as np\n import scipy.sparse as sp\n from scipy import __version__ as scipy_version\n from distutils.version import LooseVersion\n+import pandas as pd\n \n from numpy.core.numeric import ComplexWarning\n \n@@ -495,7 +496,16 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n-    if sp.issparse(array):\n+    if isinstance(array, pd.DataFrame):\n+        dtype_orig = array.dtypes.values\n+        array = array.to_numpy(dtype=dtype)\n+        if warn_on_dtype:\n+            for orig_dtype, new_dtype in zip(dtype_orig, array.dtypes):\n+                if orig_dtype != new_dtype:\n+                    msg = (\"Data with input dtype {} was converted to {}{}.\"\n+                           .format(orig_dtype, new_dtype, context))\n+                    warnings.warn(msg, DataConversionWarning)\n+    elif sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse,\n                                       dtype=dtype, copy=copy,\n",
            "model": "gpt-4o",
            "cost": 0.235345,
            "added_files": [
                "sklearn/utils/validation.py"
            ],
            "gold_files": [
                "sklearn/utils/validation.py"
            ],
            "edited_files": [
                "sklearn/utils/validation.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": false
}