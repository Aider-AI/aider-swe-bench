{
    "instance_id": "sympy__sympy-20322",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 9cc4fec441..2e4412ac71 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -91,6 +91,8 @@ def _convert_numpy_types(a, **sympify_args):\n \n def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n         evaluate=None):\n+    if evaluate is None:\n+        evaluate = global_parameters.evaluate\n     \"\"\"\n     Converts an arbitrary expression to a type that can be used inside SymPy.\n \ndiff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py\nindex fe1e71e3f2..7809e28a6d 100644\n--- a/sympy/functions/elementary/integers.py\n+++ b/sympy/functions/elementary/integers.py\n@@ -284,10 +284,14 @@ def _eval_nseries(self, x, n, logx, cdir=0):\n             return r\n \n     def _eval_rewrite_as_floor(self, arg, **kwargs):\n-        return -floor(-arg)\n+        if kwargs.get('evaluate', True):\n+            return -floor(-arg)\n+        return ceiling(arg, evaluate=False)\n \n     def _eval_rewrite_as_frac(self, arg, **kwargs):\n-        return arg + frac(-arg)\n+        if kwargs.get('evaluate', True):\n+            return arg + frac(-arg)\n+        return ceiling(arg, evaluate=False)\n \n     def _eval_is_positive(self):\n         return self.args[0].is_positive\n",
    "model": "gpt-4o",
    "cost": 0.239215,
    "added_files": [
        "sympy/core/sympify.py",
        "sympy/functions/elementary/integers.py"
    ],
    "gold_files": [
        "sympy/core/mul.py"
    ],
    "edited_files": [
        "sympy/core/sympify.py",
        "sympy/functions/elementary/integers.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "sympy__sympy-20322",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 9cc4fec441..2e4412ac71 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -91,6 +91,8 @@ def _convert_numpy_types(a, **sympify_args):\n \n def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n         evaluate=None):\n+    if evaluate is None:\n+        evaluate = global_parameters.evaluate\n     \"\"\"\n     Converts an arbitrary expression to a type that can be used inside SymPy.\n \ndiff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py\nindex fe1e71e3f2..7809e28a6d 100644\n--- a/sympy/functions/elementary/integers.py\n+++ b/sympy/functions/elementary/integers.py\n@@ -284,10 +284,14 @@ def _eval_nseries(self, x, n, logx, cdir=0):\n             return r\n \n     def _eval_rewrite_as_floor(self, arg, **kwargs):\n-        return -floor(-arg)\n+        if kwargs.get('evaluate', True):\n+            return -floor(-arg)\n+        return ceiling(arg, evaluate=False)\n \n     def _eval_rewrite_as_frac(self, arg, **kwargs):\n-        return arg + frac(-arg)\n+        if kwargs.get('evaluate', True):\n+            return arg + frac(-arg)\n+        return ceiling(arg, evaluate=False)\n \n     def _eval_is_positive(self):\n         return self.args[0].is_positive\n",
            "model": "gpt-4o",
            "cost": 0.239215,
            "added_files": [
                "sympy/core/sympify.py",
                "sympy/functions/elementary/integers.py"
            ],
            "gold_files": [
                "sympy/core/mul.py"
            ],
            "edited_files": [
                "sympy/core/sympify.py",
                "sympy/functions/elementary/integers.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": false
}