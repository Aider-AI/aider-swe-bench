{
    "instance_id": "django__django-14608",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..f46af9b839 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,7 +295,7 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n-        return self._non_form_errors\n+        return self.error_class(self._non_form_errors, 'nonform')\n \n     @property\n     def errors(self):\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 880ba0b85f..f80aca3207 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3348,7 +3348,7 @@ class AdminViewListEditable(TestCase):\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n-        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"], 'nonform')))\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n",
    "model": "gpt-4o",
    "cost": 5.812345,
    "added_files": [
        "django/forms/formsets.py",
        "tests/admin_views/tests.py"
    ],
    "gold_files": [
        "django/forms/formsets.py"
    ],
    "edited_files": [
        "django/forms/formsets.py",
        "tests/admin_views/tests.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 2,
    "tries": 3,
    "all_results": [
        {
            "instance_id": "django__django-14608",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..400bd27800 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -350,7 +350,7 @@ class BaseFormSet:\n                 },\n                 code='missing_management_form',\n             )\n-            self._non_form_errors.append(error)\n+            self._non_form_errors = self.error_class([error], 'nonform')\n \n         for i, form in enumerate(self.forms):\n             # Empty forms are unchanged forms beyond those with initial data.\n@@ -381,6 +381,7 @@ class BaseFormSet:\n             self.clean()\n         except ValidationError as e:\n             self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors.error_class = 'nonform'\n \n     def clean(self):\n         \"\"\"\n",
            "model": "gpt-4o",
            "cost": 0.7501950000000001,
            "added_files": [
                "django/forms/formsets.py"
            ],
            "gold_files": [
                "django/forms/formsets.py"
            ],
            "edited_files": [
                "django/forms/formsets.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "django__django-14608",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..8bf682ae8f 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,24 +333,26 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class([], renderer=self.renderer)\n+        self._non_form_errors.error_class = 'nonform'\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n             return\n \n         if not self.management_form.is_valid():\n-            error = ValidationError(\n-                self.error_messages['missing_management_form'],\n-                params={\n-                    'field_names': ', '.join(\n-                        self.management_form.add_prefix(field_name)\n-                        for field_name in self.management_form.errors\n-                    ),\n-                },\n-                code='missing_management_form',\n+            self._non_form_errors.append(\n+                ValidationError(\n+                    self.error_messages['missing_management_form'],\n+                    params={\n+                        'field_names': ', '.join(\n+                            self.management_form.add_prefix(field_name)\n+                            for field_name in self.management_form.errors\n+                        ),\n+                    },\n+                    code='missing_management_form',\n+                )\n             )\n-            self._non_form_errors.append(error)\n \n         for i, form in enumerate(self.forms):\n             # Empty forms are unchanged forms beyond those with initial data.\n@@ -380,7 +382,8 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, renderer=self.renderer)\n+            self._non_form_errors.error_class = 'nonform'\n \n     def clean(self):\n         \"\"\"\n",
            "model": "openrouter/anthropic/claude-3-opus",
            "cost": 4.281135,
            "added_files": [
                "django/forms/formsets.py"
            ],
            "gold_files": [
                "django/forms/formsets.py"
            ],
            "edited_files": [
                "django/forms/formsets.py"
            ],
            "edit_outcome": false,
            "lint_outcome": true,
            "test_outcome": false,
            "try": 1
        },
        {
            "instance_id": "django__django-14608",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..f46af9b839 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,7 +295,7 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n-        return self._non_form_errors\n+        return self.error_class(self._non_form_errors, 'nonform')\n \n     @property\n     def errors(self):\ndiff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 880ba0b85f..f80aca3207 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3348,7 +3348,7 @@ class AdminViewListEditable(TestCase):\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n-        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"], 'nonform')))\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n",
            "model": "gpt-4o",
            "cost": 0.781015,
            "added_files": [
                "django/forms/formsets.py",
                "tests/admin_views/tests.py"
            ],
            "gold_files": [
                "django/forms/formsets.py"
            ],
            "edited_files": [
                "django/forms/formsets.py",
                "tests/admin_views/tests.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 2
        }
    ],
    "resolved": true
}