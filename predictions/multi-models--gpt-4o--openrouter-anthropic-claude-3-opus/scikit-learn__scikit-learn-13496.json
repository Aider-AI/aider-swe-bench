{
    "instance_id": "scikit-learn__scikit-learn-13496",
    "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
    "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..25b890beb 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -111,6 +111,16 @@ class IsolationForest(BaseBagging, OutlierMixin):\n            ``behaviour`` parameter will be deprecated in 0.22 and removed in\n            0.24.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     random_state : int, RandomState instance or None, optional (default=None)\n         If int, random_state is the seed used by the random number generator;\n         If RandomState instance, random_state is the random number generator;\n@@ -172,6 +182,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  bootstrap=False,\n                  n_jobs=None,\n                  behaviour='old',\n+                 warm_start=False,\n                  random_state=None,\n                  verbose=0):\n         super().__init__(\n@@ -179,6 +190,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                 max_features=1,\n                 splitter='random',\n                 random_state=random_state),\n+                warm_start=warm_start,\n             # here above max_features has no links with self.max_features\n             bootstrap=bootstrap,\n             bootstrap_features=False,\ndiff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 67ba2d7f9..8ea53d4de 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -10,7 +10,7 @@ import pytest\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_array_equal, assert_in\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n@@ -65,6 +65,19 @@ def test_iforest():\n \n \n @pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test if warm_start=True reuses the solution of the previous call to fit.\"\"\"\n+    X = iris.data\n+    clf = IsolationForest(n_estimators=50, warm_start=True, random_state=0)\n+    clf.fit(X)\n+    first_trees = clf.estimators_\n+\n+    # Add more estimators\n+    clf.set_params(n_estimators=100)\n+    clf.fit(X)\n+    assert_equal(len(clf.estimators_), 100)\n+    assert_in(first_trees[0], clf.estimators_)\n @pytest.mark.filterwarnings('ignore:threshold_ attribute')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_iforest_sparse():\n",
    "model": "gpt-4o",
    "cost": 0.42159,
    "added_files": [
        "sklearn/ensemble/iforest.py",
        "sklearn/ensemble/tests/test_iforest.py"
    ],
    "gold_files": [
        "sklearn/ensemble/iforest.py"
    ],
    "edited_files": [
        "sklearn/ensemble/iforest.py",
        "sklearn/ensemble/tests/test_iforest.py"
    ],
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "try": 1,
    "tries": 2,
    "all_results": [
        {
            "instance_id": "scikit-learn__scikit-learn-13496",
            "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
            "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..25b890beb 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -111,6 +111,16 @@ class IsolationForest(BaseBagging, OutlierMixin):\n            ``behaviour`` parameter will be deprecated in 0.22 and removed in\n            0.24.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     random_state : int, RandomState instance or None, optional (default=None)\n         If int, random_state is the seed used by the random number generator;\n         If RandomState instance, random_state is the random number generator;\n@@ -172,6 +182,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  bootstrap=False,\n                  n_jobs=None,\n                  behaviour='old',\n+                 warm_start=False,\n                  random_state=None,\n                  verbose=0):\n         super().__init__(\n@@ -179,6 +190,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                 max_features=1,\n                 splitter='random',\n                 random_state=random_state),\n+                warm_start=warm_start,\n             # here above max_features has no links with self.max_features\n             bootstrap=bootstrap,\n             bootstrap_features=False,\ndiff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 67ba2d7f9..8ea53d4de 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -10,7 +10,7 @@ import pytest\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_array_equal, assert_in\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n@@ -65,6 +65,19 @@ def test_iforest():\n \n \n @pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test if warm_start=True reuses the solution of the previous call to fit.\"\"\"\n+    X = iris.data\n+    clf = IsolationForest(n_estimators=50, warm_start=True, random_state=0)\n+    clf.fit(X)\n+    first_trees = clf.estimators_\n+\n+    # Add more estimators\n+    clf.set_params(n_estimators=100)\n+    clf.fit(X)\n+    assert_equal(len(clf.estimators_), 100)\n+    assert_in(first_trees[0], clf.estimators_)\n @pytest.mark.filterwarnings('ignore:threshold_ attribute')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_iforest_sparse():\n",
            "model": "gpt-4o",
            "cost": 0.42159,
            "added_files": [
                "sklearn/ensemble/iforest.py",
                "sklearn/ensemble/tests/test_iforest.py"
            ],
            "gold_files": [
                "sklearn/ensemble/iforest.py"
            ],
            "edited_files": [
                "sklearn/ensemble/iforest.py",
                "sklearn/ensemble/tests/test_iforest.py"
            ],
            "edit_outcome": true,
            "lint_outcome": true,
            "test_outcome": true,
            "try": 1
        }
    ],
    "resolved": true
}