{"model_name_or_path": "lite-multi", "model_patch": "", "instance_id": "astropy__astropy-12907"}
{"model_name_or_path": "lite-multi", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..a57c652595 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -480,11 +480,8 @@ class NDArithmeticMixin:\n             axis_kwarg = dict(axis=kwds[\"axis\"]) if \"axis\" in kwds else dict()\n             return self.uncertainty.propagate(\n                 operation, operand, result, correlation, **axis_kwarg\n-            )\n-\n-    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n-        \"\"\"\n-        Calculate the resulting mask.\n+            )    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n+        \"\"\"Calculate the resulting mask.\n \n         This is implemented as the piecewise ``or`` operation if both have a\n         mask.\n@@ -513,14 +510,16 @@ class NDArithmeticMixin:\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n         # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        if handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n+        elif operand is None:\n+            return deepcopy(self.mask)\n+        elif self.mask is None and operand.mask is None:\n+            return None\n+        elif self.mask is None:\n             # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        elif operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n", "instance_id": "astropy__astropy-14995"}
{"model_name_or_path": "lite-multi", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..5f3a3621ec 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n", "instance_id": "astropy__astropy-14365"}
{"model_name_or_path": "lite-multi", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..1c4c7e5dc8 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -25,6 +25,36 @@ class SimpleRSTHeader(FixedWidthHeader):\n         ends[-1] = None\n         return vals, starts, ends\n \n+    def write(self, lines):\n+        # Get the header_rows parameter if specified\n+        header_rows = getattr(self, 'header_rows', None)\n+        \n+        # Get column info\n+        cols = self.cols\n+        col_str_list = []\n+        for col in cols:\n+            col_str_list.append(str(col.info.name))\n+        \n+        # Write the header rows if specified\n+        if header_rows is not None:\n+            if 'name' in header_rows:\n+                lines.append(self.splitter.join(col_str_list))\n+            if 'unit' in header_rows:\n+                unit_list = []\n+                for col in cols:\n+                    unit = getattr(col.info, 'unit', '')\n+                    unit_list.append(str(unit) if unit else '')\n+                lines.append(self.splitter.join(unit_list))\n+        else:\n+            # Default behavior - just write names\n+            lines.append(self.splitter.join(col_str_list))\n+\n+        # Write the RST separator line\n+        widths = [max(len(col.info.name), len(str(getattr(col.info, 'unit', ''))))\n+                 for col in cols]\n+        separator = [self.position_char * width for width in widths]\n+        lines.append(self.splitter.join(separator))\n+\n \n class SimpleRSTData(FixedWidthData):\n     start_line = 3\n", "instance_id": "astropy__astropy-14182"}
