{
    "instance_id": "django__django-12470",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex f027a74976..e2c1a28245 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -236,6 +236,14 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+        # If no ordering is defined on the Meta class, inherit ordering from the parent model\n+        if not self.ordering and self.parents:\n+            # Find the first parent with ordering defined\n+            for parent in self.parents:\n+                if parent._meta.ordering:\n+                    self.ordering = parent._meta.ordering\n+                    break\n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\ndiff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex dfcd47c111..dbed01bfa9 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -5,12 +5,75 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n-from django.test import SimpleTestCase\n-from django.test.utils import isolate_apps\n+from django.test import SimpleTestCase, TransactionTestCase\n+from django.test.utils import isolate_apps, skipUnlessDBFeature\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    # ... existing tests ...\n+\n+class InheritedOrderingTests(TransactionTestCase):\n+    \"\"\"Test inherited ordering behavior with actual database queries.\"\"\"\n+    \n+    @skipUnlessDBFeature('supports_order_by_nulls_modifier')\n+    def test_inherited_ordering_in_queries(self):\n+        class ParentModel(models.Model):\n+            class Meta:\n+                ordering = ['-pk']\n+                app_label = 'model_inheritance'\n+\n+        class ChildModel(ParentModel):\n+            class Meta:\n+                app_label = 'model_inheritance'\n+\n+        # Create some test data\n+        parent1 = ParentModel.objects.create()\n+        parent2 = ParentModel.objects.create()\n+        child1 = ChildModel.objects.create()\n+        child2 = ChildModel.objects.create()\n+\n+        # Verify DESC ordering is preserved in queries\n+        children = list(ChildModel.objects.all())\n+        self.assertEqual(children, [child2, child1])\n+\n+    def test_inherited_ordering(self):\n+        \"\"\"\n+        Ordering should be inherited from the parent model unless explicitly\n+        overridden.\n+        \"\"\"\n+        class ParentModel(models.Model):\n+            class Meta:\n+                ordering = ['-pk']\n+\n+        class ChildModel(ParentModel):\n+            pass\n+\n+        class GrandChildModel(ChildModel):\n+            pass\n+\n+        class ChildWithOrdering(ParentModel):\n+            class Meta:\n+                ordering = ['pk']\n+\n+        # Basic inheritance of ordering\n+        self.assertEqual(ChildModel._meta.ordering, ['-pk'])\n+        \n+        # Multi-level inheritance\n+        self.assertEqual(GrandChildModel._meta.ordering, ['-pk'])\n+        \n+        # Child model can override parent ordering\n+        self.assertEqual(ChildWithOrdering._meta.ordering, ['pk'])\n+\n+        # Mixed field ordering is preserved\n+        class MixedOrderingParent(models.Model):\n+            class Meta:\n+                ordering = ['-pk', 'name']\n+\n+        class MixedOrderingChild(MixedOrderingParent):\n+            pass\n+\n+        self.assertEqual(MixedOrderingChild._meta.ordering, ['-pk', 'name'])\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}