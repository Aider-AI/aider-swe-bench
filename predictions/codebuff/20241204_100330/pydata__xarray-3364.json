{
    "instance_id": "pydata__xarray-3364",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..97570c0e 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -16,6 +16,7 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    missing_vars=\"ignore\",\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -25,6 +26,10 @@ def concat(\n         xarray objects to concatenate together. Each object is expected to\n         consist of variables and coordinates with matching shapes except for\n         along the concatenated dimension.\n+    missing_vars : {'ignore', 'raise'}, optional\n+        What to do when variables are missing from some datasets:\n+          * 'ignore': Fill missing variables with NaN\n+          * 'raise': Raise an error\n     dim : str or DataArray or pandas.Index\n         Name of the dimension to concatenate along. This can either be a new\n         dimension name, in which case it is added along axis=0, or an existing\n@@ -189,6 +194,16 @@ def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat):\n                 # all nonindexes that are not the same in each dataset\n                 for k in getattr(datasets[0], subset):\n                     if k not in concat_over:\n+                        # Handle missing variables\n+                        if any(k not in ds.variables for ds in datasets[1:]):\n+                            if missing_vars == \"raise\":\n+                                raise ValueError(\n+                                    \"Variable %r missing from some datasets\" % k\n+                                )\n+                            concat_over.add(k)\n+                            equals[k] = False\n+                            continue\n+\n                         # Compare the variable of all datasets vs. the one\n                         # of the first dataset. Perform the minimum amount of\n                         # loads in order to avoid multiple loads from disk\ndiff --git a/xarray/tests/test_concat.py b/xarray/tests/test_concat.py\nindex c7af0fc9..0a952f71 100644\n--- a/xarray/tests/test_concat.py\n+++ b/xarray/tests/test_concat.py\n@@ -173,6 +173,19 @@ class TestConcatDataset:\n         with raises_regex(ValueError, \"must supply at least one\"):\n             concat([], \"dim1\")\n \n+        # Test missing variables behavior\n+        ds1 = Dataset({'a': ('x', [1, 2]), 'b': ('x', [3, 4])})\n+        ds2 = Dataset({'a': ('x', [5, 6])})  # Missing 'b'\n+        \n+        # Should work with missing_vars='ignore'\n+        result = concat([ds1, ds2], 'x', missing_vars='ignore')\n+        assert 'b' in result\n+        assert np.isnan(result.b[2:]).all()\n+        \n+        # Should raise with missing_vars='raise' \n+        with raises_regex(ValueError, \"Variable 'b' missing from some datasets\"):\n+            concat([ds1, ds2], 'x', missing_vars='raise')\n+\n         with raises_regex(ValueError, \"Cannot specify both .*='different'\"):\n             concat(\n                 [data, data], dim=\"concat_dim\", data_vars=\"different\", compat=\"override\"\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}