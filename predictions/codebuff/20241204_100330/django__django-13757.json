{
    "instance_id": "django__django-13757",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..202171c44a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -364,16 +364,36 @@ class CaseInsensitiveMixin:\n \n \n class KeyTransformIsNull(lookups.IsNull):\n-    # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n+        # key__isnull=False is the same as has_key='key'\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # key__isnull=True needs to check that the key doesn't exist\n+        # (JSON_EXISTS returns false) rather than checking if the value is NULL\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        if isinstance(lhs, KeyTransform):\n+            *_, key_transforms_extra = lhs.preprocess_lhs(compiler, connection)\n+            key_transforms = key_transforms_extra + key_transforms\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[-1]).as_oracle(compiler, connection)\n+        # Negate the result to check that the key doesn't exist\n+        return 'NOT %s' % sql, params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # key__isnull=True needs to check that the key doesn't exist\n+        # (JSON_TYPE returns NULL) rather than checking if the value is NULL\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        if isinstance(lhs, KeyTransform):\n+            *_, key_transforms_extra = lhs.preprocess_lhs(compiler, connection)\n+            key_transforms = key_transforms_extra + key_transforms\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[-1]).as_sqlite(compiler, connection)\n+        # Negate the result to check that the key doesn't exist\n+        return 'NOT %s' % sql, params\n \n \n class KeyTransformIn(lookups.In):\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": true
}