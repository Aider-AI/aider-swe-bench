{
    "instance_id": "django__django-13964",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 899ae8efe8..dd181bcbfb 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -335,6 +335,9 @@ class RelatedField(FieldCacheMixin, Field):\n         returned by related descriptors. obj is an instance of\n         self.related_field.model.\n         \"\"\"\n+        # Get the primary key value even if it was just set and not saved yet\n+        if obj.pk is None and getattr(obj, self.target_field.attname, None):\n+            obj.pk = getattr(obj, self.target_field.attname)\n         return {\n             '%s__%s' % (self.name, rh_field.name): getattr(obj, rh_field.attname)\n             for _, rh_field in self.related_fields\ndiff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex fa37e121ea..e9a903c957 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -148,6 +148,12 @@ class MixinModel(models.Model, Mixin):\n class Base(models.Model):\n     titles = models.ManyToManyField(Title)\n \n+class Product(models.Model):\n+    sku = models.CharField(max_length=50, primary_key=True)\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n \n class SubBase(Base):\n     sub_id = models.IntegerField(primary_key=True)\ndiff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 60edaa3d99..173f1d82cf 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -89,6 +89,20 @@ class ModelInheritanceTests(TestCase):\n         # Make sure Restaurant and ItalianRestaurant have the right fields in\n         # the right order.\n         self.assertEqual(\n+\n+    def test_fk_nonnum_pk_assignment(self):\n+        \"\"\"\n+        Setting parent object after setting on child leads to correct values\n+        for parents with non-numeric primary key.\n+        \"\"\"\n+        with transaction.atomic():\n+            order = Order()\n+            order.product = Product()\n+            order.product.sku = \"foo\"\n+            order.product.save()\n+            order.save()\n+            self.assertEqual(Order.objects.filter(product__sku=\"foo\").count(), 1)\n+            self.assertTrue(Order.objects.filter(product=order.product).exists())\n             [f.name for f in Restaurant._meta.fields],\n             [\"id\", \"name\", \"address\", \"place_ptr\", \"rating\", \"serves_hot_dogs\",\n              \"serves_pizza\", \"chef\"]\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}