{
    "instance_id": "sphinx-doc__sphinx-10325",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..3131ca89e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,10 +109,21 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+def inherited_members_option(arg: Any) -> Union[object, Set[str], str]:\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\n+    \n+    Accepts:\n+    - None/True: Include all inherited members (from object)\n+    - False: No inherited members\n+    - str: Name of a single base class to include members from\n+    - comma-separated str: Names of base classes to include members from\n+    \"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return None\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',')} if ',' in arg else arg\n     else:\n         return arg\n \n@@ -681,9 +692,17 @@ class Documenter:\n         \"\"\"\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n+                inherited_from = self.options.inherited_members\n+                if isinstance(inherited_from, set):\n+                    # Multiple base classes specified\n+                    allowed_bases = inherited_from\n+                else:\n+                    # Single base class specified\n+                    allowed_bases = {inherited_from}\n+\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n-                        # given member is a member of specified *super class*\n+                    if cls.__name__ in allowed_bases and cls != self.object:\n+                        # Member from an allowed base class\n                         return True\n                     elif name in cls.__dict__:\n                         return False\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": true
}