{
    "instance_id": "django__django-11797",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 180f4a41fc..2f38b0c23c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -901,7 +901,13 @@ class QuerySet:\n         set.\n         \"\"\"\n         self._not_support_combined_queries('filter')\n-        return self._filter_or_exclude(False, *args, **kwargs)\n+        clone = self._filter_or_exclude(False, *args, **kwargs)\n+        # Preserve GROUP BY when used as a subquery\n+        if any(isinstance(value, Query) for value in kwargs.values()):\n+            for value in kwargs.values():\n+                if isinstance(value, Query) and value.group_by:\n+                    clone.query.group_by = value.group_by\n+        return clone\n \n     def exclude(self, *args, **kwargs):\n         \"\"\"\ndiff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex fbc265d113..d7e5c009ef 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -192,3 +192,17 @@ class AggregateQuery(Query):\n     def add_subquery(self, query, using):\n         query.subquery = True\n         self.subquery, self.sub_params = query.get_compiler(using).as_sql(with_col_aliases=True)\n+\n+    def get_source_expressions(self):\n+        return [self.lhs]\n+\n+    def set_source_expressions(self, new_exprs):\n+        if len(new_exprs) != 1:\n+            raise ValueError(\n+                'Subquery was created with a single query, but got %d as '\n+                'source expressions' % len(new_exprs)\n+            )\n+        self.lhs = new_exprs[0]\n+        # Preserve GROUP BY fields from values() when used in a subquery\n+        if hasattr(new_exprs[0], 'values_select'):\n+            self.group_by = new_exprs[0].values_select\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}