{
    "instance_id": "sympy__sympy-12481",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..01d01d8528 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -801,8 +801,8 @@ class Permutation(Basic):\n     def __new__(cls, *args, **kwargs):\n         \"\"\"\n         Constructor for the Permutation object from a list or a\n-        list of lists in which all elements of the permutation may\n-        appear only once.\n+        list of lists. When cycles are provided, they are processed\n+        in left-to-right order.\n \n         Examples\n         ========\n@@ -894,12 +894,7 @@ def __new__(cls, *args, **kwargs):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n-        temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        temp = flatten(args)            if not is_cycle and has_dups(temp):\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n@@ -909,8 +904,7 @@ def __new__(cls, *args, **kwargs):\n                              max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n+            # Process cycles in left-to-right order\n             c = Cycle()\n             for ci in args:\n                 c = c(*ci)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}