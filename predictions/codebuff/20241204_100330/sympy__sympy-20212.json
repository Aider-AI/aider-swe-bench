{
    "instance_id": "sympy__sympy-20212",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 984398c760..81bbb563a5 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -207,7 +207,7 @@ class Pow(Expr):\n     | 0**oo        | 0       | Because for all complex numbers z near        |\n     |              |         | 0, z**oo -> 0.                                |\n     +--------------+---------+-----------------------------------------------+\n-    | 0**-oo       | zoo     | This is not strictly true, as 0**oo may be    |\n+    | 0**-oo       | zoo     | This is not strictly true, as 0**-oo may be   |\n     |              |         | oscillating between positive and negative     |\n     |              |         | values or rotating in the complex plane.      |\n     |              |         | It is convenient, however, when the base      |\n@@ -299,6 +299,11 @@ def __new__(cls, b, e, evaluate=None):\n                 return b\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n+            elif b == S.Zero and e.is_infinite:\n+                if e.is_negative:\n+                    return S.ComplexInfinity\n+                elif e.is_positive:\n+                    return S.Zero\n             # Only perform autosimplification if exponent or base is a Symbol or number\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}