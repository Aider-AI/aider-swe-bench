{
    "instance_id": "django__django-13551",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..dc923e0b6a 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -78,13 +78,14 @@ class PasswordResetTokenGenerator:\n \n     def _make_hash_value(self, user, timestamp):\n         \"\"\"\n-        Hash the user's primary key and some user state that's sure to change\n+        Hash the user's primary key, email (if available), and some user state that's sure to change\n         after a password reset to produce a token that invalidated when it's\n         used:\n         1. The password field will change upon a password reset (even if the\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field (if available) will invalidate the token if changed.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n@@ -94,7 +95,10 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        # Get the user's email value if the email field exists\n+        email_field = user.get_email_field_name()\n+        email_value = getattr(user, email_field, '') if email_field else ''\n+        return str(user.pk) + user.password + str(login_timestamp) + str(email_value) + str(timestamp)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\ndiff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex bba435be84..2a87924260 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -39,6 +39,19 @@ class TokenGeneratorTest(TestCase):\n \n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n+        \n+    def test_token_invalidates_on_email_change(self):\n+        \"\"\"The token is invalid if the user's email address changes.\"\"\"\n+        user = User.objects.create_user('tokentestuser', 'test@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        \n+        # Change the email\n+        user.email = 'different@example.com'\n+        user.save()\n+        # Token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": true
}