{
    "instance_id": "pytest-dev__pytest-8906",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/doc/en/how-to/skipping.rst b/doc/en/how-to/skipping.rst\nindex 156570062..cc92943b8 100644\n--- a/doc/en/how-to/skipping.rst\n+++ b/doc/en/how-to/skipping.rst\n@@ -39,6 +39,7 @@ More details on the ``-r`` option can be found by running ``pytest -h``.\n Skipping test functions\n -----------------------\n \n+.. _skipping-test-functions:\n \n \n The simplest way to skip a test function is to mark it with the ``skip`` decorator\n@@ -60,8 +61,19 @@ by calling the ``pytest.skip(reason)`` function:\n         if not valid_config():\n             pytest.skip(\"unsupported configuration\")\n \n-The imperative method is useful when it is not possible to evaluate the skip condition\n-during import time.\n+.. note::\n+    When dealing with modules that contain Python version-dependent syntax,\n+    use ``pytest.skip(reason, allow_module_level=True)`` before any imports\n+    that would cause syntax errors. For example:\n+\n+    .. code-block:: python\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"requires Python 3.8+\", allow_module_level=True)\n+\n+        # Import that uses Python 3.8+ syntax\n+        from module_with_positional_only_args import *\n \n It is also possible to skip the whole module using\n ``pytest.skip(reason, allow_module_level=True)`` at the module level:\ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..b538ae8ea 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,15 +130,20 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. This is particularly useful when\n+        the module contains syntax from newer Python versions that would cause\n+        import errors.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For most cases, it is better to use the :ref:`pytest.mark.skipif ref` marker\n+        when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n+\n+        However, when dealing with Python version-dependent syntax, use\n+        ``pytest.skip(allow_module_level=True)`` before the incompatible imports.\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}