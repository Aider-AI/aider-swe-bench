{
    "instance_id": "sympy__sympy-19254",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 93298f47e6..d8969b43b9 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,29 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n+\n+    This provides a tighter bound than Mignotte's original bound.\n+    \"\"\"\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \n+    # Knuth-Cohen bound formula\n+    return b*(2*a/b)**(n-1)\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+\n+    This provides a tighter bound than Mignotte's original bound.\n+    \"\"\"\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \n+    # Knuth-Cohen bound formula adapted for multivariate case\n+    return b*(2*a/b)**(n-1)\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}