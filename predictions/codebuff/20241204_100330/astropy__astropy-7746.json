{
    "instance_id": "astropy__astropy-7746",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/astropy/wcs/utils.py b/astropy/wcs/utils.py\nindex 3eca5f736e..f1b318f9e2 100644\n--- a/astropy/wcs/utils.py\n+++ b/astropy/wcs/utils.py\n@@ -498,6 +498,29 @@ def skycoord_to_pixel(coords, wcs, origin=0, mode='all'):\n     \"\"\"\n     Convert a set of SkyCoord coordinates into pixels.\n \n+    Parameters\n+    ----------\n+    coords : `~astropy.coordinates.SkyCoord`\n+        The coordinates to convert.\n+    wcs : `~astropy.wcs.WCS`\n+        The WCS transformation to use.\n+    origin : int\n+        Whether to return 0 or 1-based pixel coordinates.\n+    mode : 'all' or 'wcs'\n+        Whether to do the transformation including distortions (``'all'``) or\n+        only including only the core WCS transformation (``'wcs'``).\n+\n+    Returns\n+    -------\n+    xp, yp : `numpy.ndarray`\n+        The pixel coordinates\n+    \"\"\"\n+    # Handle empty input coordinates\n+    if hasattr(coords, 'size') and coords.size == 0:\n+        return np.array([], dtype=np.float64), np.array([], dtype=np.float64)\n+    \"\"\"\n+    Convert a set of SkyCoord coordinates into pixels.\n+\n     Parameters\n     ----------\n     coords : `~astropy.coordinates.SkyCoord`\n@@ -562,7 +585,40 @@ def skycoord_to_pixel(coords, wcs, origin=0, mode='all'):\n     return xp, yp\n \n \n-def pixel_to_skycoord(xp, yp, wcs, origin=0, mode='all', cls=None):\n+\n+    \"\"\"\n+    Convert a set of pixel coordinates into a `~astropy.coordinates.SkyCoord`\n+    coordinate.\n+\n+    Parameters\n+    ----------\n+    xp, yp : float or `numpy.ndarray`\n+        The coordinates to convert.\n+    wcs : `~astropy.wcs.WCS`\n+        The WCS transformation to use.\n+    origin : int\n+        Whether to return 0 or 1-based pixel coordinates.\n+    mode : 'all' or 'wcs'\n+        Whether to do the transformation including distortions (``'all'``) or\n+        only including only the core WCS transformation (``'wcs'``).\n+    cls : class or None\n+        The class of object to create.  Should be a\n+        `~astropy.coordinates.SkyCoord` subclass.  If None, defaults to\n+        `~astropy.coordinates.SkyCoord`.\n+\n+    Returns\n+    -------\n+    coords : Whatever ``cls`` is (a subclass of `~astropy.coordinates.SkyCoord`)\n+        The celestial coordinates\n+    \"\"\"\n+    # Handle empty input arrays\n+    if (hasattr(xp, 'size') and xp.size == 0) or (hasattr(yp, 'size') and yp.size == 0):\n+        if cls is None:\n+            from ..coordinates import SkyCoord\n+            cls = SkyCoord\n+        frame = wcs_to_celestial_frame(wcs)\n+        return cls(frame.realize_frame(r.UnitSphericalRepresentation(lon=[] * u.deg, lat=[] * u.deg)))\n+        \n     \"\"\"\n     Convert a set of pixel coordinates into a `~astropy.coordinates.SkyCoord`\n     coordinate.\ndiff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..8ce48ee7c7 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1349,6 +1349,9 @@ reduce these to 2 dimensions using the naxis kwarg.\n     def wcs_pix2world(self, *args, **kwargs):\n         if self.wcs is None:\n             raise ValueError(\"No basic WCS settings were created.\")\n+        # Handle empty arrays\n+        if any(hasattr(arg, 'size') and arg.size == 0 for arg in args):\n+            return tuple(np.array([], dtype=np.float64) for _ in range(self.wcs.naxis))\n         return self._array_converter(\n             lambda xy, o: self.wcs.p2s(xy, o)['world'],\n             'output', *args, **kwargs)\n@@ -2156,6 +2159,9 @@ reduce these to 2 dimensions using the naxis kwarg.\n     def wcs_world2pix(self, *args, **kwargs):\n         if self.wcs is None:\n             raise ValueError(\"No basic WCS settings were created.\")\n+        # Handle empty arrays\n+        if any(hasattr(arg, 'size') and arg.size == 0 for arg in args):\n+            return tuple(np.array([], dtype=np.float64) for _ in range(self.wcs.naxis))\n         return self._array_converter(\n             lambda xy, o: self.wcs.s2p(xy, o)['pixcrd'],\n             'input', *args, **kwargs)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}