{
    "instance_id": "sympy__sympy-20442",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex b03ed4cd88..2ce0a9d1c7 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -34,6 +34,41 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     return res_exponents\n \n \n+\n+    >>> from sympy.physics.units import speed_of_light, meter, gram, second, day\n+    >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant\n+    >>> from sympy.physics.units import kilometer, centimeter\n+    >>> from sympy.physics.units import gravitational_constant, hbar\n+    >>> from sympy.physics.units import convert_to\n+    >>> convert_to(mile, kilometer)\n+    25146*kilometer/15625\n+    >>> convert_to(mile, kilometer).n()\n+    1.609344*kilometer\n+    >>> convert_to(speed_of_light, meter/second)\n+    299792458*meter/second\n+    >>> convert_to(day, second)\n+    86400*second\n+    >>> 3*newton\n+    3*newton\n+    >>> convert_to(3*newton, kilogram*meter/second**2)\n+    3*kilogram*meter/second**2\n+    >>> convert_to(atomic_mass_constant, gram)\n+    1.660539060e-24*gram\n+\n+    Conversion to multiple units:\n+\n+    >>> convert_to(speed_of_light, [meter, second])\n+    299792458*meter/second\n+    >>> convert_to(3*newton, [centimeter, gram, second])\n+    300000*centimeter*gram/second**2\n+\n+    Conversion to Planck units:\n+\n+    >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()\n+    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n+\n+    \"\"\"\n+=======\n def convert_to(expr, target_units, unit_system=\"SI\"):\n     \"\"\"\n     Convert ``expr`` to the same expression with all of its units and quantities\n@@ -42,6 +77,9 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     ``target_units`` may be a single unit/quantity, or a collection of\n     units/quantities.\n \n+    If the units are incompatible (like joule*second to joule), returns the original\n+    expression unchanged.\n+\n     Examples\n     ========\n \n@@ -77,6 +115,44 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()\n     7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n \n+    For incompatible units, returns the original expression:\n+    \n+    >>> convert_to(joule*second, joule)\n+    joule*second\n+    \"\"\"=======\n+\n+    >>> from sympy.physics.units import speed_of_light, meter, gram, second, day\n+    >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant\n+    >>> from sympy.physics.units import kilometer, centimeter\n+    >>> from sympy.physics.units import gravitational_constant, hbar\n+    >>> from sympy.physics.units import convert_to\n+    >>> convert_to(mile, kilometer)\n+    25146*kilometer/15625\n+    >>> convert_to(mile, kilometer).n()\n+    1.609344*kilometer\n+    >>> convert_to(speed_of_light, meter/second)\n+    299792458*meter/second\n+    >>> convert_to(day, second)\n+    86400*second\n+    >>> 3*newton\n+    3*newton\n+    >>> convert_to(3*newton, kilogram*meter/second**2)\n+    3*kilogram*meter/second**2\n+    >>> convert_to(atomic_mass_constant, gram)\n+    1.660539060e-24*gram\n+\n+    Conversion to multiple units:\n+\n+    >>> convert_to(speed_of_light, [meter, second])\n+    299792458*meter/second\n+    >>> convert_to(3*newton, [centimeter, gram, second])\n+    300000*centimeter*gram/second**2\n+\n+    Conversion to Planck units:\n+\n+    >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()\n+    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n+\n     \"\"\"\n     from sympy.physics.units import UnitSystem\n     unit_system = UnitSystem.get_unit_system(unit_system)\n@@ -102,7 +178,7 @@ def get_total_scale_factor(expr):\n         return expr\n \n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    if depmat is None or any(p != 0 for p in depmat):\n         return expr\n \n     expr_scale_factor = get_total_scale_factor(expr)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}