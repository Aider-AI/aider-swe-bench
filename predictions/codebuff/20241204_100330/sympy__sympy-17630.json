{
    "instance_id": "sympy__sympy-17630",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..171b3ddeb0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,15 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result = BlockMatrix(self.blocks*other.blocks)\n+            # Convert any scalar Zero results back to ZeroMatrix\n+            blocks = result.blocks.copy()\n+            for i in range(blocks.shape[0]):\n+                for j in range(blocks.shape[1]):\n+                    if blocks[i,j].is_zero:\n+                        from sympy.matrices.expressions.matexpr import ZeroMatrix\n+                        blocks[i,j] = ZeroMatrix(*blocks[i,j].shape)\n+            return BlockMatrix(blocks)\n \n         return self * other\n \n@@ -474,7 +482,17 @@ def bc_matmul(expr):\n             matrices.pop(i+1)\n         else:\n             i+=1\n-    return MatMul(factor, *matrices).doit()\n+    result = MatMul(factor, *matrices).doit()\n+    # Handle case where result contains scalar Zero objects\n+    if isinstance(result, BlockMatrix):\n+        blocks = result.blocks.copy()\n+        for i in range(blocks.shape[0]):\n+            for j in range(blocks.shape[1]):\n+                if blocks[i,j].is_zero:\n+                    from sympy.matrices.expressions.matexpr import ZeroMatrix\n+                    blocks[i,j] = ZeroMatrix(*blocks[i,j].shape)\n+        result = BlockMatrix(blocks)\n+    return result\n \n def bc_transpose(expr):\n     collapse = block_collapse(expr.arg)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}