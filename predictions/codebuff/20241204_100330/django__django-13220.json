{
    "instance_id": "django__django-13220",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..62251392e5 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,25 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            # Compare error dictionaries independent of field order\n+            return self.error_dict == other.error_dict\n+        elif hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            # Compare error lists independent of order\n+            return sorted(str(e) for e in self.error_list) == sorted(str(e) for e in other.error_list)\n+        elif hasattr(self, 'message') and hasattr(other, 'message'):\n+            # Compare simple messages\n+            return (\n+                self.message == other.message and\n+                self.code == other.code and\n+                self.params == other.params\n+            )\n+        return False\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\ndiff --git a/tests/test_exceptions/test_validation_error.py b/tests/test_exceptions/test_validation_error.py\nindex a0bbfaf77e..5bde37ecc0 100644\n--- a/tests/test_exceptions/test_validation_error.py\n+++ b/tests/test_exceptions/test_validation_error.py\n@@ -14,3 +14,56 @@ class TestValidationError(unittest.TestCase):\n         message_dict['field2'] = ['E3', 'E4']\n         exception = ValidationError(message_dict)\n         self.assertEqual(sorted(exception.messages), ['E1', 'E2', 'E3', 'E4'])\n+\n+    def test_eq_simple(self):\n+        self.assertEqual(\n+            ValidationError('error'),\n+            ValidationError('error')\n+        )\n+        self.assertEqual(\n+            ValidationError('error', code='invalid'),\n+            ValidationError('error', code='invalid')\n+        )\n+        self.assertNotEqual(\n+            ValidationError('error1'),\n+            ValidationError('error2')\n+        )\n+        self.assertNotEqual(\n+            ValidationError('error', code='invalid1'),\n+            ValidationError('error', code='invalid2')\n+        )\n+\n+    def test_eq_list(self):\n+        self.assertEqual(\n+            ValidationError(['error1', 'error2']),\n+            ValidationError(['error1', 'error2'])\n+        )\n+        # Order doesn't matter\n+        self.assertEqual(\n+            ValidationError(['error1', 'error2']),\n+            ValidationError(['error2', 'error1'])\n+        )\n+        self.assertNotEqual(\n+            ValidationError(['error1', 'error2']),\n+            ValidationError(['error1', 'error3'])\n+        )\n+\n+    def test_eq_dict(self):\n+        self.assertEqual(\n+            ValidationError({'field1': ['error1', 'error2']}),\n+            ValidationError({'field1': ['error1', 'error2']})\n+        )\n+        # Field order doesn't matter\n+        self.assertEqual(\n+            ValidationError({'field1': ['error1'], 'field2': ['error2']}),\n+            ValidationError({'field2': ['error2'], 'field1': ['error1']})\n+        )\n+        # Error order within a field doesn't matter\n+        self.assertEqual(\n+            ValidationError({'field1': ['error1', 'error2']}),\n+            ValidationError({'field1': ['error2', 'error1']})\n+        )\n+        self.assertNotEqual(\n+            ValidationError({'field1': ['error1']}),\n+            ValidationError({'field2': ['error1']})\n+        )\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}