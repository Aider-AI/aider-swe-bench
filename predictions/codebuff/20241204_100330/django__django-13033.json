{
    "instance_id": "django__django-13033",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..abef80c45a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -329,6 +329,18 @@ class SQLCompiler:\n                 order_by.append((OrderBy(expr, descending=descending), False))\n                 continue\n \n+            # Handle self-referencing foreign key _id fields directly\n+            if '_id' in col and not col.endswith('_id'):\n+                field_name = col.replace('_id', '')\n+                field = self.query.model._meta.get_field(field_name)\n+                if field.remote_field and field.remote_field.model == self.query.model:\n+                    # For self-referencing FK, use the ID column directly\n+                    order_by.append((\n+                        OrderBy(F(field.attname), descending=descending),\n+                        False\n+                    ))\n+                    continue\n+\n             if '.' in field:\n                 # This came in through an extra(order_by=...) addition. Pass it\n                 # on verbatim.\ndiff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 523fa607f0..4d40da29b2 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -145,6 +145,18 @@ class TestQuery(SimpleTestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             query.build_where(filter_expr)\n \n+    def test_order_by_self_referential_fk_id(self):\n+        \"\"\"\n+        Ordering by self-referential foreign key with _id suffix should not add\n+        unnecessary joins.\n+        \"\"\"\n+        query = Query(Author)\n+        query.add_ordering('root_id')\n+        sql, params = query.get_compiler('default').as_sql()\n+        # Should use the column directly without joins\n+        self.assertNotIn('JOIN', sql)\n+        self.assertIn('ORDER BY', sql)\n+\n     def test_filter_non_conditional(self):\n         query = Query(Item)\n         msg = 'Cannot filter against a non-conditional expression.'\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}