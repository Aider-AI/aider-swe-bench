{
    "instance_id": "sympy__sympy-13031",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex da1d30716e..40429087f7 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -489,6 +489,28 @@ def entry(i, j):\n             return self[i, j]\n         return self._new(self.rows, self.cols, entry)\n \n+    def _eval_hstack(self, *args):\n+        # Handle empty matrices specially to restore 1.0 behavior\n+        if self.rows == 0:\n+            cols = sum(m.cols for m in args)\n+            return self._new(0, cols, [])\n+        return self._eval_matrix_hstack(*args)\n+\n+    def _eval_matrix_hstack(self, *args):\n+        # Original hstack implementation for non-empty matrices\n+        cols = self.cols\n+        for m in args:\n+            cols += m.cols\n+        def entry(i, j):\n+            if j < self.cols:\n+                return self[i, j]\n+            j -= self.cols\n+            for m in args:\n+                if j < m.cols:\n+                    return m[i, j]\n+                j -= m.cols\n+        return self._new(self.rows, cols, entry)\n+\n     def _eval_row_op_swap(self, row1, row2):\n         def entry(i, j):\n             if i == row1:\ndiff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex bca44a60fe..39b8324a20 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -2453,6 +2453,12 @@ def test_issue_5320():\n         [1, 0, 2, 0],\n         [0, 1, 0, 2]\n     ])\n+    # Test empty matrix hstack behavior\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1) \n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n \n def test_issue_11944():\n     A = Matrix([[1]])\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}