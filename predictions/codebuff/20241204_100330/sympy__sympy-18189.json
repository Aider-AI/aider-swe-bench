{
    "instance_id": "sympy__sympy-18189",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..f745f877fe 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -98,6 +98,30 @@ def _even(i):\n     return i % 2 == 0\n \n \n+\n+    ``eq`` should be an expression which is assumed to be zero.\n+    ``t`` is the parameter to be used in the solution.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x, y, z\n+    >>> diophantine(x**2 - y**2)\n+    {(t_0, -t_0), (t_0, t_0)}\n+\n+    >>> diophantine(x*(2*x + 3*y - z))\n+    {(0, n1, n2), (t_0, t_1, 2*t_0 + 3*t_1)}\n+    >>> diophantine(x**2 + 3*x*y + 4*x)\n+    {(0, n1), (3*t_0 - 4, -t_0)}\n+\n+    See Also\n+    ========\n+\n+    diop_solve()\n+    sympy.utilities.iterables.permute_signs\n+    sympy.utilities.iterables.signed_permutations\n+    \"\"\"\n+=======\n def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 permute=False):\n     \"\"\"\n@@ -160,6 +184,29 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n     See Also\n     ========\n \n+    diop_solve()\n+    sympy.utilities.iterables.permute_signs\n+    sympy.utilities.iterables.signed_permutations\n+    \"\"\"=======\n+\n+    ``eq`` should be an expression which is assumed to be zero.\n+    ``t`` is the parameter to be used in the solution.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x, y, z\n+    >>> diophantine(x**2 - y**2)\n+    {(t_0, -t_0), (t_0, t_0)}\n+\n+    >>> diophantine(x*(2*x + 3*y - z))\n+    {(0, n1, n2), (t_0, t_1, 2*t_0 + 3*t_1)}\n+    >>> diophantine(x**2 + 3*x*y + 4*x)\n+    {(0, n1), (3*t_0 - 4, -t_0)}\n+\n+    See Also\n+    ========\n+\n     diop_solve()\n     sympy.utilities.iterables.permute_signs\n     sympy.utilities.iterables.signed_permutations\n@@ -181,8 +228,18 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             syms = [i for i in syms if i in var]\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                base_soln = diophantine(eq, param)\n+                if not permute:\n+                    return {tuple([t[dict_sym_index[i]] for i in var])\n+                            for t in base_soln}\n+                # For permute=True, first map solutions to syms order\n+                mapped_soln = {tuple([t[dict_sym_index[i]] for i in var])\n+                            for t in base_soln}\n+                # Then generate permutations\n+                complete_soln = set()\n+                for t in mapped_soln:\n+                    complete_soln.update(signed_permutations(t))\n+                return complete_soln\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\ndiff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex e4e8972ae0..c0534423bb 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -896,13 +896,20 @@ def test__can_do_sum_of_squares():\n \n \n def test_diophantine_permute_sign():\n-    from sympy.abc import a, b, c, d, e\n+    from sympy.abc import a, b, c, d, e, m, n\n     eq = a**4 + b**4 - (2**4 + 3**4)\n     base_sol = set([(2, 3)])\n     assert diophantine(eq) == base_sol\n     complete_soln = set(signed_permutations(base_sol.pop()))\n     assert diophantine(eq, permute=True) == complete_soln\n \n+    # Test symbol order independence\n+    eq = n**4 + m**4 - (2**4 + 3**4)\n+    complete_soln_nm = diophantine(eq, syms=(n,m), permute=True)\n+    complete_soln_mn = diophantine(eq, syms=(m,n), permute=True)\n+    assert len(complete_soln_nm) == len(complete_soln_mn)\n+    assert complete_soln_nm == complete_soln_mn\n+\n     eq = a**2 + b**2 + c**2 + d**2 + e**2 - 234\n     assert len(diophantine(eq)) == 35\n     assert len(diophantine(eq, permute=True)) == 62000\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}