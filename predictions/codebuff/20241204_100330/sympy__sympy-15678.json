{
    "instance_id": "sympy__sympy-15678",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..b84d7f536e 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -525,6 +525,62 @@ def hypot(x, y):\n     return set(rv)\n \n \n+\n+    y : the dependent variable or a list of dependent variables (with y first)\n+    x : the variable that the derivative is being taken with respect to\n+    n : the order of the derivative (default is 1)\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x, y, a\n+    >>> from sympy.geometry.util import idiff\n+\n+    >>> circ = x**2 + y**2 - 4\n+    >>> idiff(circ, y, x)\n+    -x/y\n+    >>> idiff(circ, y, x, 2).simplify()\n+    -(x**2 + y**2)/y**3\n+\n+    Here, ``a`` is assumed to be independent of ``x``:\n+\n+    >>> idiff(x + a + y, y, x)\n+    -1\n+\n+    Now the x-dependence of ``a`` is made explicit by listing ``a`` after\n+    ``y`` in a list.\n+\n+    >>> idiff(x + a + y, [y, a], x)\n+    -Derivative(a, x) - 1\n+\n+    See Also\n+    ========\n+\n+    sympy.core.function.Derivative: represents unevaluated derivatives\n+    sympy.core.function.diff: explicitly differentiates wrt symbols\n+\n+    \"\"\"\n+    if is_sequence(y):\n+        dep = set(y)\n+        y = y[0]\n+    elif isinstance(y, Symbol):\n+        dep = {y}\n+    else:\n+        raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n+\n+    f = dict([(s, Function(\n+        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n+    dydx = Function(y.name)(x).diff(x)\n+    eq = eq.subs(f)\n+    derivs = {}\n+    for i in range(n):\n+        yp = solve(eq.diff(x), dydx)[0].subs(derivs)\n+        if i == n - 1:\n+            return yp.subs([(v, k) for k, v in f.items()])\n+        derivs[dydx] = yp\n+        eq = dydx - yp\n+        dydx = dydx.diff(x)\n+=======\n def idiff(eq, y, x, n=1):\n     \"\"\"Return ``dy/dx`` assuming that ``eq == 0``.\n \n@@ -564,6 +620,65 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.Derivative: represents unevaluated derivatives\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n+    \"\"\"\n+    if is_sequence(y):\n+        dep = set(y)\n+        y = y[0]\n+    elif isinstance(y, Symbol) or isinstance(y, Function):\n+        dep = {y}\n+    else:\n+        raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n+\n+    # Convert Eq objects to standard form\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n+    f = dict([(s, Function(\n+        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n+    dydx = Function(y.name)(x).diff(x) if isinstance(y, Symbol) else y.diff(x)\n+    eq = eq.subs(f)\n+    derivs = {}\n+    for i in range(n):\n+        yp = solve(eq.diff(x), dydx)[0].subs(derivs)\n+        if i == n - 1:\n+            return yp.subs([(v, k) for k, v in f.items()])\n+        derivs[dydx] = yp\n+        eq = dydx - yp\n+        dydx = dydx.diff(x)=======\n+\n+    y : the dependent variable or a list of dependent variables (with y first)\n+    x : the variable that the derivative is being taken with respect to\n+    n : the order of the derivative (default is 1)\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.abc import x, y, a\n+    >>> from sympy.geometry.util import idiff\n+\n+    >>> circ = x**2 + y**2 - 4\n+    >>> idiff(circ, y, x)\n+    -x/y\n+    >>> idiff(circ, y, x, 2).simplify()\n+    -(x**2 + y**2)/y**3\n+\n+    Here, ``a`` is assumed to be independent of ``x``:\n+\n+    >>> idiff(x + a + y, y, x)\n+    -1\n+\n+    Now the x-dependence of ``a`` is made explicit by listing ``a`` after\n+    ``y`` in a list.\n+\n+    >>> idiff(x + a + y, [y, a], x)\n+    -Derivative(a, x) - 1\n+\n+    See Also\n+    ========\n+\n+    sympy.core.function.Derivative: represents unevaluated derivatives\n+    sympy.core.function.diff: explicitly differentiates wrt symbols\n+\n     \"\"\"\n     if is_sequence(y):\n         dep = set(y)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}