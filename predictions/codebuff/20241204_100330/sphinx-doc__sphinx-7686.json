{
    "instance_id": "sphinx-doc__sphinx-7686",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/doc/usage/extensions/autosummary.rst b/doc/usage/extensions/autosummary.rst\nindex 38d18361e..3db7a67f7 100644\n--- a/doc/usage/extensions/autosummary.rst\n+++ b/doc/usage/extensions/autosummary.rst\n@@ -191,7 +191,8 @@ also use these config values:\n .. confval:: autosummary_imported_members\n \n    A boolean flag indicating whether to document classes and functions imported\n-   in modules. Default is ``False``\n+   in modules. When False, only members defined in the module itself are included.\n+   Default is ``False``\n \n    .. versionadded:: 2.1\n \ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex 9a3428f5d..2d16554a0 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -131,6 +131,9 @@ class AutodocDirective(SphinxDirective):\n         objtype = self.name[4:]  # strip prefix (auto-).\n         doccls = self.env.app.registry.documenters[objtype]\n \n+        # Pass imported_members setting from config\n+        imported_members = self.env.config.autosummary_imported_members\n+\n         # process the options with the selected documenter's option_spec\n         try:\n             documenter_options = process_documenter_options(doccls, self.config, self.options)\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex cdccf710d..e568b0430 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -101,7 +101,7 @@ def import_object(modname: str, objpath: List[str], objtype: str = '',\n         raise ImportError(errmsg)\n \n \n-def get_module_members(module: Any) -> List[Tuple[str, Any]]:\n+def get_module_members(module: Any, imported_members: bool = True) -> List[Tuple[str, Any]]:\n     \"\"\"Get members of target module.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n \n@@ -109,7 +109,8 @@ def get_module_members(module: Any) -> List[Tuple[str, Any]]:\n     for name in dir(module):\n         try:\n             value = safe_getattr(module, name, None)\n-            members[name] = (name, value)\n+            if imported_members or not hasattr(value, '__module__') or value.__module__ == module.__name__:\n+                members[name] = (name, value)\n         except AttributeError:\n             continue\n \ndiff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\nindex 0cdd88feb..3bfb0fdff 100644\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -326,6 +326,9 @@ class Autosummary(SphinxDirective):\n             if documenter.options.members and not documenter.check_module():\n                 continue\n \n+            # Get imported_members setting from config\n+            imported_members = self.config.autosummary_imported_members\n+\n             # try to also get a source code analyzer for attribute docs\n             try:\n                 documenter.analyzer = ModuleAnalyzer.for_module(\n@@ -333,6 +336,7 @@ class Autosummary(SphinxDirective):\n                 # parse right now, to get PycodeErrors on parsing (results will\n                 # be cached anyway)\n                 documenter.analyzer.find_attr_docs()\n+                documenter.imported_members = self.config.autosummary_imported_members\n             except PycodeError as err:\n                 logger.debug('[autodoc] module analyzer failed: %s', err)\n                 # no source file -- e.g. for builtin and C modules\ndiff --git a/tests/roots/test-autosummary/dummy_module.py b/tests/roots/test-autosummary/dummy_module.py\nindex 93d482b59..7ef036a0c 100644\n--- a/tests/roots/test-autosummary/dummy_module.py\n+++ b/tests/roots/test-autosummary/dummy_module.py\n@@ -6,8 +6,11 @@\n    C.prop_attr1\n    C.prop_attr2\n    C.C2\n+   os\n \"\"\"\n \n+import os\n+\n \n def withSentence():\n     '''I have a sentence which\ndiff --git a/tests/test_ext_autosummary.py b/tests/test_ext_autosummary.py\nindex 166029ccb..b40a2e065 100644\n--- a/tests/test_ext_autosummary.py\n+++ b/tests/test_ext_autosummary.py\n@@ -274,6 +274,12 @@ def test_autosummary_generate_overwrite2(app_params, make_app):\n     assert content != ''\n     assert 'autosummary_dummy_module.rst' not in app._warning.getvalue()\n \n+def test_autosummary_imported_members(app_params, make_app):\n+    args, kwargs = app_params\n+    kwargs['confoverrides'] = {'autosummary_imported_members': False}\n+    app = make_app(*args, **kwargs)\n+    content = (app.srcdir / 'generated' / 'autosummary_dummy_module.rst').read_text()\n+    assert 'os' not in content\n \n @pytest.mark.sphinx('dummy', testroot='ext-autosummary-recursive')\n def test_autosummary_recursive(app, status, warning):\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}