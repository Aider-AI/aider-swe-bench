{
    "instance_id": "scikit-learn__scikit-learn-13496",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..7a48128d9 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -120,6 +120,10 @@ class IsolationForest(BaseBagging, OutlierMixin):\n     verbose : int, optional (default=0)\n         Controls the verbosity of the tree building process.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n \n     Attributes\n     ----------\n@@ -173,7 +177,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\ndiff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 67ba2d7f9..1c6532e24 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -194,6 +194,30 @@ def test_iforest_parallel_regression():\n     assert_array_almost_equal(y1, y3)\n \n \n+def test_iforest_warm_start():\n+    \"\"\"Test if warm_start allows incrementing n_estimators.\"\"\"\n+    X = iris.data\n+    \n+    # Test that a warm_started forest has the same results as a no-warm_start forest\n+    clf = IsolationForest(n_estimators=5, random_state=0, warm_start=False)\n+    clf.fit(X)\n+    y1 = clf.predict(X)\n+    \n+    clf_ws = IsolationForest(n_estimators=3, random_state=0, warm_start=True)\n+    clf_ws.fit(X)\n+    clf_ws.set_params(n_estimators=5)\n+    clf_ws.fit(X)\n+    y2 = clf_ws.predict(X)\n+    \n+    assert_array_almost_equal(y1, y2)\n+\n+    # Test that warm start fails when n_estimators is decreased\n+    clf = IsolationForest(n_estimators=5, random_state=0, warm_start=True)\n+    clf.fit(X)\n+    clf.set_params(n_estimators=4)\n+    assert_raises(ValueError, clf.fit, X)\n+\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_iforest_performance():\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}