{
    "instance_id": "sympy__sympy-20049",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..2e22991354 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -496,6 +496,28 @@ def v2pt_theory(self, otherpoint, outframe, fixedframe):\n         self.set_vel(outframe, v + (omega ^ dist))\n         return self.vel(outframe)\n \n+\n+        frame : ReferenceFrame\n+            The frame in which the returned velocity vector will be defined in\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.physics.vector import Point, ReferenceFrame\n+        >>> N = ReferenceFrame('N')\n+        >>> p1 = Point('p1')\n+        >>> p1.set_vel(N, 10 * N.x)\n+        >>> p1.vel(N)\n+        10*N.x\n+\n+        \"\"\"\n+\n+        _check_frame(frame)\n+        if not (frame in self._vel_dict):\n+            raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                             ' defined in ReferenceFrame ' + frame.name)\n+        return self._vel_dict[frame]\n+=======\n     def vel(self, frame):\n         \"\"\"The velocity Vector of this Point in the ReferenceFrame.\n \n@@ -515,6 +537,44 @@ def vel(self, frame):\n         >>> p1.vel(N)\n         10*N.x\n \n+        >>> from sympy.physics.vector import Point, ReferenceFrame\n+        >>> from sympy.physics.vector import dynamicsymbols\n+        >>> N = ReferenceFrame('N')\n+        >>> q = dynamicsymbols('q')\n+        >>> P = Point('P')\n+        >>> Q = Point('Q')\n+        >>> r = q*N.x + 2*q*N.y\n+        >>> Q.set_pos(P, r)\n+        >>> Q.vel(N)  # Velocity is calculated from position\n+        q'*N.x + 2*q'*N.y\n+\n+        \"\"\"\n+        _check_frame(frame)\n+        if frame in self._vel_dict:\n+            return self._vel_dict[frame]\n+\n+        # Try to calculate velocity from position\n+        for point, pos_vec in self._pos_dict.items():\n+            if point._vel_dict.get(frame) is not None:\n+                # Calculate velocity using chain rule\n+                return point.vel(frame) + pos_vec.dt(frame)\n+\n+        raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                         ' defined in ReferenceFrame ' + frame.name)=======\n+\n+        frame : ReferenceFrame\n+            The frame in which the returned velocity vector will be defined in\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy.physics.vector import Point, ReferenceFrame\n+        >>> N = ReferenceFrame('N')\n+        >>> p1 = Point('p1')\n+        >>> p1.set_vel(N, 10 * N.x)\n+        >>> p1.vel(N)\n+        10*N.x\n+\n         \"\"\"\n \n         _check_frame(frame)\ndiff --git a/sympy/physics/vector/tests/test_point.py b/sympy/physics/vector/tests/test_point.py\nindex 052b5c3af7..dc9fca4788 100644\n--- a/sympy/physics/vector/tests/test_point.py\n+++ b/sympy/physics/vector/tests/test_point.py\n@@ -112,6 +112,17 @@ def test_point_pos():\n     assert Q.pos_from(O) == 10 * N.x + 10 * N.y + 5 * B.x + 5 * B.y\n     assert O.pos_from(Q) == -10 * N.x - 10 * N.y - 5 * B.x - 5 * B.y\n \n+def test_point_vel_auto():\n+    from sympy.physics.vector import dynamicsymbols\n+    N = ReferenceFrame('N')\n+    q = dynamicsymbols('q')\n+    P = Point('P')\n+    Q = Point('Q')\n+    r = q*N.x + 2*q*N.y\n+    Q.set_pos(P, r)\n+    P.set_vel(N, 0)\n+    assert Q.vel(N) == q.diff()*N.x + 2*q.diff()*N.y\n+\n def test_point_partial_velocity():\n \n     N = ReferenceFrame('N')\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}