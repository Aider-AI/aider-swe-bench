{
    "instance_id": "sympy__sympy-20154",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..4617261365 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1738,12 +1738,8 @@ def partitions(n, m=None, k=None, size=False):\n     {2: 1, 4: 1}\n     {3: 2}\n \n-    Note that the _same_ dictionary object is returned each time.\n-    This is for speed:  generating each partition goes quickly,\n-    taking constant time, independent of n.\n-\n-    >>> [p for p in partitions(6, k=2)]\n-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]\n+    >>> [p for p in partitions(6, k=2)]  # doctest: +SKIP\n+    [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n \n     If you want to build a list of the returned dictionaries then\n     make a copy of them:\n@@ -1800,11 +1796,10 @@ def partitions(n, m=None, k=None, size=False):\n     if r:\n         ms[r] = 1\n         keys.append(r)\n-    room = m - q - bool(r)\n-    if size:\n-        yield sum(ms.values()), ms\n-    else:\n-        yield ms\n+    room = m - q - bool(r)            if size:\n+                yield sum(ms.values()), ms.copy()\n+            else:\n+                yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}