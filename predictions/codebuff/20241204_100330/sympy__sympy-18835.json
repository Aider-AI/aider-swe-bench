{
    "instance_id": "sympy__sympy-18835",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex d96e76263b..3fc28eaf29 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2085,6 +2085,36 @@ def has_variety(seq):\n     return False\n \n \n+\n+    >>> from sympy.utilities.iterables import uniq\n+    >>> dat = [1, 4, 1, 5, 4, 2, 1, 2]\n+    >>> type(uniq(dat)) in (list, tuple)\n+    False\n+\n+    >>> list(uniq(dat))\n+    [1, 4, 5, 2]\n+    >>> list(uniq(x for x in dat))\n+    [1, 4, 5, 2]\n+    >>> list(uniq([[1], [2, 1], [1]]))\n+    [[1], [2, 1]]\n+    \"\"\"\n+    try:\n+        seen = set()\n+        result = result or []\n+        for i, s in enumerate(seq):\n+            if not (s in seen or seen.add(s)):\n+                yield s\n+    except TypeError:\n+        if s not in result:\n+            yield s\n+            result.append(s)\n+        if hasattr(seq, '__getitem__'):\n+            for s in uniq(seq[i + 1:], result):\n+                yield s\n+        else:\n+            for s in uniq(seq, result):\n+                yield s\n+=======\n def uniq(seq, result=None):\n     \"\"\"\n     Yield unique elements from ``seq`` as an iterator. The second\n@@ -2099,6 +2129,46 @@ def uniq(seq, result=None):\n     >>> type(uniq(dat)) in (list, tuple)\n     False\n \n+    >>> list(uniq(dat))\n+    [1, 4, 5, 2]\n+    >>> list(uniq(x for x in dat))\n+    [1, 4, 5, 2]\n+    >>> list(uniq([[1], [2, 1], [1]]))\n+    [[1], [2, 1]]\n+\n+    A RuntimeError is raised if the input sequence is modified during iteration:\n+    >>> f = list('THISTLE')\n+    >>> for i in uniq(f):\n+    ...     f.remove(i)  # doctest: +SKIP\n+    Traceback (most recent call last):\n+      ...\n+    RuntimeError: list changed size during iteration\n+    \"\"\"\n+    try:\n+        seen = set()\n+        result = result or []\n+        initial_len = len(seq) if hasattr(seq, '__len__') else None\n+        for i, s in enumerate(seq):\n+            if initial_len is not None and len(seq) != initial_len:\n+                raise RuntimeError(\"list changed size during iteration\")\n+            if not (s in seen or seen.add(s)):\n+                yield s\n+    except TypeError:\n+        if s not in result:\n+            yield s\n+            result.append(s)\n+        if hasattr(seq, '__getitem__'):\n+            for s in uniq(seq[i + 1:], result):\n+                yield s\n+        else:\n+            for s in uniq(seq, result):\n+                yield s=======\n+\n+    >>> from sympy.utilities.iterables import uniq\n+    >>> dat = [1, 4, 1, 5, 4, 2, 1, 2]\n+    >>> type(uniq(dat)) in (list, tuple)\n+    False\n+\n     >>> list(uniq(dat))\n     [1, 4, 5, 2]\n     >>> list(uniq(x for x in dat))\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}