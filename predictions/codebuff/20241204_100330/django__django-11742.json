{
    "instance_id": "django__django-11742",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 2e00ca3ff3..a0d2b7e856 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -516,6 +516,41 @@ def validate_image_file_extension(value):\n     return FileExtensionValidator(allowed_extensions=get_available_image_extensions())(value)\n \n \n+@deconstructible\n+class MaxLengthChoicesValidator:\n+    \"\"\"Validate that max_length is large enough to fit the longest choice value.\"\"\"\n+    message = _('Ensure max_length is at least %(required_length)d to fit the longest choice (%(choice)s).')\n+    code = 'max_length_too_small'\n+\n+    def __call__(self, field):\n+        if not field.choices or not field.max_length:\n+            return\n+        \n+        # Get longest choice value\n+        max_length = 0\n+        longest_choice = ''\n+        for choice in field.choices:\n+            # Handle grouped choices\n+            if isinstance(choice[1], (list, tuple)):\n+                for subchoice in choice[1]:\n+                    if len(str(subchoice[0])) > max_length:\n+                        max_length = len(str(subchoice[0]))\n+                        longest_choice = str(subchoice[0])\n+            else:\n+                if len(str(choice[0])) > max_length:\n+                    max_length = len(str(choice[0]))\n+                    longest_choice = str(choice[0])\n+        \n+        if max_length > field.max_length:\n+            raise ValidationError(\n+                self.message,\n+                code=self.code,\n+                params={\n+                    'required_length': max_length,\n+                    'choice': longest_choice,\n+                }\n+            )\n+\n @deconstructible\n class ProhibitNullCharactersValidator:\n     \"\"\"Validate that the string doesn't contain the null character.\"\"\"\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3f73..d1407bc7b4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -950,6 +950,8 @@ class CharField(Field):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        self.validators.append(validators.ProhibitNullCharactersValidator())\n+        self.validators.append(validators.MaxLengthChoicesValidator())\n \n     def check(self, **kwargs):\n         return [\ndiff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex 051be2eeec..90bc9c9ad7 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -49,6 +49,24 @@ class ValidationTests(SimpleTestCase):\n     class Choices(models.TextChoices):\n         C = 'c', 'C'\n \n+    def test_max_length_choices_validation(self):\n+        \"\"\"Test that max_length is validated against the longest choice value.\"\"\"\n+        with self.assertRaisesMessage(ValidationError, \"Ensure max_length is at least 5 to fit the longest choice (hello)\"):\n+            f = models.CharField(max_length=3, choices=[('hi', 'Hi'), ('hello', 'Hello')])\n+            f.clean('hello')\n+\n+        # Test with grouped choices\n+        with self.assertRaisesMessage(ValidationError, \"Ensure max_length is at least 6 to fit the longest choice (choice2)\"):\n+            f = models.CharField(max_length=4, choices=[\n+                ('Group 1', [('choice1', 'First'), ('choice2', 'Second')]),\n+                ('Group 2', [('choice3', 'Third')])\n+            ])\n+            f.clean('choice1')\n+\n+        # Test that validation passes when max_length is sufficient\n+        f = models.CharField(max_length=5, choices=[('hi', 'Hi'), ('hello', 'Hello')])\n+        self.assertEqual('hello', f.clean('hello'))\n+\n     def test_charfield_raises_error_on_empty_string(self):\n         f = models.CharField()\n         with self.assertRaises(ValidationError):\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}