{
    "instance_id": "django__django-16910",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a5b0f464a9..1dc477d787 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1742,6 +1742,44 @@ class QuerySet(AltersData):\n             field = field.split(LOOKUP_SEP, 1)[0]\n             if field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n+\n+        # Check if any select_related fields would be deferred\n+        if self.query.select_related:\n+            # Get all fields needed for select_related joins\n+            needed_fields = set()\n+            opts = self.model._meta\n+            for field_path in self.query.select_related:\n+                # Handle True/False cases\n+                if field_path is True:\n+                    # True means all direct fields - we can't defer any\n+                    raise TypeError(\n+                        \"only() with specific fields cannot be used after \"\n+                        \"select_related() without an explicit fields list\"\n+                    )\n+                if field_path is False:\n+                    continue\n+                    \n+                # Walk through the field path to find needed fields\n+                current_opts = opts\n+                parts = field_path.split(LOOKUP_SEP)\n+                for part in parts:\n+                    field = current_opts.get_field(part)\n+                    needed_fields.add(field.attname)\n+                    if hasattr(field, 'foreign_related_fields'):\n+                        for f in field.foreign_related_fields:\n+                            needed_fields.add(f.attname)\n+                    if hasattr(field, 'remote_field') and field.remote_field:\n+                        current_opts = field.remote_field.model._meta\n+\n+            # Check if any needed fields would be deferred\n+            fields_set = set(fields)\n+            deferred_but_needed = needed_fields - fields_set\n+            if deferred_but_needed:\n+                raise ValueError(\n+                    \"only() cannot defer the fields %s which are needed by \"\n+                    \"select_related().\" % ', '.join(sorted(deferred_but_needed))\n+                )\n+\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n         return clone\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}