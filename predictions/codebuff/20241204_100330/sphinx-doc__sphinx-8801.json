{
    "instance_id": "sphinx-doc__sphinx-8801",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..fb0ebca41 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2363,6 +2363,12 @@ class UninitializedInstanceAttributeMixin(DataDocumenterMixinBase):\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n         if self.object is UNINITIALIZED_ATTR:\n+            # Check for docstring from parent class annotations\n+            if self.parent:\n+                for cls in getmro(self.parent):\n+                    docstring = self.get_attribute_comment(cls, self.objpath[-1])\n+                    if docstring:\n+                        return [docstring]\n             return None\n         else:\n             return super().get_doc(encoding, ignore)  # type: ignore\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 477aae247..4ae2bc0a6 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -298,7 +298,21 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n                 if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n+                    # Get docstring from comment if available\n+                    docstring = None\n+                    if hasattr(cls, '__module__'):\n+                        try:\n+                            analyzer = ModuleAnalyzer.for_module(cls.__module__)\n+                            analyzer.analyze()\n+                            qualname = safe_getattr(cls, '__qualname__', '')\n+                            if qualname:\n+                                key = (qualname, name)\n+                                if key in analyzer.attr_docs:\n+                                    docstring = '\\n'.join(analyzer.attr_docs[key])\n+                        except Exception:\n+                            pass\n+                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n+                                               docstring=docstring)\n \n             # append instance attributes (cf. self.attr1) if analyzer knows\n             try:\ndiff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex d555359cf..ac51e590f 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -2238,6 +2238,26 @@ def test_name_mangling(app):\n \n \n @pytest.mark.skipif(sys.version_info < (3, 6), reason='python 3.6+ is required.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodata_type_comment(self, app):\n+    text = (\".. autodata:: target.data3\\n\"\n+            \"   :no-value:\")\n+    assert_warns(TypeCommentWarning, autodoc_process_docstring, app, 'data', 'target.data3',\n+                None, None, text, [], None)\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')    def test_inherited_annotation_docstring(self, app):\n+        text = \".. autoclass:: target.ChildClass\"\n+        actual = do_autodoc(app, 'class', 'target.ChildClass', options={\"members\": None})\n+        content = '\\n'.join(actual)\n+        assert 'Inherited attribute with comment annotation.' in content\n+        assert 'Inherited attribute with docstring annotation.' in content\n+        assert 'Inherited attribute from mixin.' in content\n+\n+        # Verify the specific example from instructions.md\n+        actual = do_autodoc(app, 'class', 'target.Child', options={\"members\": None})\n+        content = '\\n'.join(actual)\n+        assert \"The person's name\" in content\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_hide_value(app):\n     options = {'members': True}\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}