{
    "instance_id": "django__django-10924",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex a977256525..365733015f 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1078,10 +1078,20 @@ class MultiValueField(Field):\n class FilePathField(ChoiceField):\n     def __init__(self, path, *, match=None, recursive=False, allow_files=True,\n                  allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.base_path = path\n+        self.match, self.recursive = match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         super().__init__(choices=(), **kwargs)\n \n+        self._set_choices()\n+\n+    def _get_path(self):\n+        \"\"\"Get the path, resolving it if it's a callable.\"\"\"\n+        path = self.base_path() if callable(self.base_path) else self.base_path\n+        return path\n+\n+    def _set_choices(self):\n+        \"\"\"Set choices based on current path value.\"\"\"\n         if self.required:\n             self.choices = []\n         else:\n@@ -1090,8 +1100,10 @@ class FilePathField(ChoiceField):\n         if self.match is not None:\n             self.match_re = re.compile(self.match)\n \n-        if recursive:\n-            for root, dirs, files in sorted(os.walk(self.path)):\n+        path = self._get_path()\n+\n+        if self.recursive:\n+            for root, dirs, files in sorted(os.walk(path)):\n                 if self.allow_files:\n                     for f in sorted(files):\n                         if self.match is None or self.match_re.search(f):\n@@ -1106,7 +1118,7 @@ class FilePathField(ChoiceField):\n                             self.choices.append((f, f.replace(path, \"\", 1)))\n         else:\n             choices = []\n-            for f in os.scandir(self.path):\n+            for f in os.scandir(path):\n                 if f.name == '__pycache__':\n                     continue\n                 if (((self.allow_files and f.is_file()) or\ndiff --git a/tests/forms_tests/field_tests/test_filepathfield.py b/tests/forms_tests/field_tests/test_filepathfield.py\nindex 44f6aff521..4fee3a593c 100644\n--- a/tests/forms_tests/field_tests/test_filepathfield.py\n+++ b/tests/forms_tests/field_tests/test_filepathfield.py\n@@ -20,6 +20,7 @@ def fix_os_paths(x):\n \n \n class FilePathFieldTest(SimpleTestCase):\n+    \"\"\"Tests for FilePathField.\"\"\"\n     expected_choices = [\n         ('/filepathfield_test_dir/__init__.py', '__init__.py'),\n         ('/filepathfield_test_dir/a.py', 'a.py'),\n@@ -89,6 +90,41 @@ class FilePathFieldTest(SimpleTestCase):\n         f = FilePathField(path=self.path, recursive=True, allow_folders=False, allow_files=False)\n         self.assertChoices(f, [])\n \n+    def test_callable_path(self):\n+        def get_path():\n+            return self.path\n+        f = FilePathField(path=get_path)\n+        expected = [\n+            ('/filepathfield_test_dir/README', 'README'),\n+        ] + self.expected_choices[:4]\n+        self.assertChoices(f, expected)\n+\n+    def test_callable_path_change(self):\n+        paths = [self.path, os.path.join(PATH, 'filepathfield_test_dir/c/')]\n+        current_path_index = 0\n+        def get_path():\n+            nonlocal current_path_index\n+            path = paths[current_path_index]\n+            current_path_index = (current_path_index + 1) % len(paths)\n+            return path\n+            \n+        f = FilePathField(path=get_path)\n+        \n+        # First call - root path\n+        expected = [\n+            ('/filepathfield_test_dir/README', 'README'),\n+        ] + self.expected_choices[:4]\n+        self.assertChoices(f, expected)\n+        \n+        # Second call - subfolder path\n+        f._set_choices()\n+        expected = [\n+            ('/filepathfield_test_dir/c/__init__.py', '__init__.py'),\n+            ('/filepathfield_test_dir/c/d.py', 'd.py'),\n+            ('/filepathfield_test_dir/c/e.py', 'e.py'),\n+        ]\n+        self.assertChoices(f, expected)\n+\n     def test_recursive_folders_without_files(self):\n         f = FilePathField(path=self.path, recursive=True, allow_folders=True, allow_files=False)\n         self.assertChoices(f, [\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}