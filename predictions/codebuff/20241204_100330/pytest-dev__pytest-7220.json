{
    "instance_id": "pytest-dev__pytest-7220",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 4a79bc861..3413a34f0 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -333,6 +333,10 @@ class Node(metaclass=NodeMeta):\n     def _repr_failure_py(\n         self, excinfo: ExceptionInfo[BaseException], style=None,\n     ) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n+        # Use original location if available for error reporting\n+        orig_location = None\n+        if hasattr(self, \"_original_location\"):\n+            orig_location = self._original_location\n         if isinstance(excinfo.value, ConftestImportFailure):\n             excinfo = ExceptionInfo(excinfo.value.excinfo)\n         if isinstance(excinfo.value, fail.Exception):\n@@ -347,6 +351,11 @@ class Node(metaclass=NodeMeta):\n             self._prunetraceback(excinfo)\n             if len(excinfo.traceback) == 0:\n                 excinfo.traceback = tb\n+            # Update traceback paths to use original location\n+            if orig_location is not None:\n+                for entry in excinfo.traceback:\n+                    if entry.path == self.fspath:\n+                        entry.path = orig_location[0]\n             if style == \"auto\":\n                 style = \"long\"\n         # XXX should excinfo.getrepr record all data and toterminal() process it?\ndiff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 178df6004..805b9d83b 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -225,6 +225,7 @@ class TestReport(BaseReport):\n         sections=(),\n         duration=0,\n         user_properties=None,\n+        original_location: Optional[Tuple[str, Optional[int], str]] = None,\n         **extra\n     ) -> None:\n         #: normalized collection node id\n@@ -234,6 +235,8 @@ class TestReport(BaseReport):\n         #: actual location of a test item - it might be different from the\n         #: collected one e.g. if a method is inherited from a different module.\n         self.location = location  # type: Tuple[str, Optional[int], str]\n+        #: original location before any directory changes\n+        self.original_location = original_location or location\n \n         #: a name -> value dictionary containing all keywords and\n         #: markers associated with a test invocation.\ndiff --git a/src/_pytest/runner.py b/src/_pytest/runner.py\nindex e7211369c..f11ed68df 100644\n--- a/src/_pytest/runner.py\n+++ b/src/_pytest/runner.py\n@@ -283,7 +283,12 @@ class CallInfo:\n \n \n def pytest_runtest_makereport(item, call):\n-    return TestReport.from_item_and_call(item, call)\n+    # Store original location before any directory changes\n+    original_location = getattr(item, \"_original_location\", None)\n+    if original_location is None and call.when == \"setup\":\n+        original_location = item.location\n+        item._original_location = original_location\n+    return TestReport.from_item_and_call(item, call, original_location=original_location)\n \n \n def pytest_make_collect_report(collector: Collector) -> CollectReport:\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}