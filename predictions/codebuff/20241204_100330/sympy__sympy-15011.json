{
    "instance_id": "sympy__sympy-15011",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..18028dc441 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -718,6 +718,12 @@ def _preprocess(self, args, expr):\n         if not dummify:\n             dummify = any(isinstance(arg, Dummy) for arg in flatten(args))\n \n+        # Special handling for MatrixSymbol names with curly braces\n+        def clean_matrix_name(name):\n+            if '{' in name or '}' in name:\n+                return name.replace('{', '_').replace('}', '_')\n+            return name\n+\n         argstrs = []\n         for arg in args:\n             if iterable(arg):\n@@ -727,8 +733,16 @@ def _preprocess(self, args, expr):\n                 argstrs.append(str(arg))\n             elif isinstance(arg, Symbol):\n                 argrep = self._argrepr(arg)\n-\n-                if dummify or not self._is_safe_ident(argrep):\n+                if hasattr(arg, 'is_Matrix') and arg.is_Matrix:\n+                    # Clean MatrixSymbol names\n+                    argrep = clean_matrix_name(argrep)\n+                    if dummify:\n+                        dummy = Dummy(argrep)\n+                        argstrs.append(self._argrepr(dummy))\n+                        expr = self._subexpr(expr, {arg: dummy})\n+                    else:\n+                        argstrs.append(argrep)\n+                elif dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n                     argstrs.append(self._argrepr(dummy))\n                     expr = self._subexpr(expr, {arg: dummy})\ndiff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 149a7e3136..8e2e617431 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -850,6 +850,18 @@ def test_lambdify_dummy_arg():\n     f3 = lambdify([[d2]], d2 + 1)\n     assert f3([2]) == 3\n \n+def test_lambdify_matrix_curly_names():\n+    from sympy import MatrixSymbol\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    f = lambdify(curlyv, curlyv)\n+    import numpy as np\n+    val = np.array([[1], [2]])\n+    assert np.array_equal(f(val), val)\n+    \n+    # Test with dummify=True\n+    f_dummy = lambdify(curlyv, curlyv, dummify=True)\n+    assert np.array_equal(f_dummy(val), val)\n+\n def test_lambdify_mixed_symbol_dummy_args():\n     d = Dummy()\n     # Contrived example of name clash\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}