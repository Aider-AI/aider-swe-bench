{
    "instance_id": "django__django-16816",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..c854485934 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -895,39 +895,46 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n+        \n+        # Try to get the field from the model\n         try:\n             field = obj.model._meta.get_field(item)\n-        except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n+            # Validate that the field exists and is valid for list_display\n+            if isinstance(field, models.ManyToManyField) or (\n+                getattr(field, \"rel\", None) and field.rel.field.many_to_one\n+            ):\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n+                        f\"The value of '{label}' must not be a many-to-many field or a \"\n+                        f\"reverse foreign key.\",\n                         obj=obj.__class__,\n-                        id=\"admin.E108\",\n+                        id=\"admin.E109\",\n                     )\n                 ]\n-        if isinstance(field, models.ManyToManyField) or (\n-            getattr(field, \"rel\", None) and field.rel.field.many_to_one\n-        ):\n+            return []        except FieldDoesNotExist:\n+            # Check if it's a model method/property\n+            try:\n+                attr = getattr(obj.model, item)\n+                if callable(attr) or isinstance(attr, property):\n+                    return []\n+            except AttributeError:\n+                pass\n+            \n             return [\n                 checks.Error(\n-                    f\"The value of '{label}' must not be a many-to-many field or a \"\n-                    f\"reverse foreign key.\",\n+                    \"The value of '%s' refers to '%s', which is not a \"\n+                    \"callable, an attribute of '%s', or an attribute or \"\n+                    \"method on '%s'.\"\n+                    % (\n+                        label,\n+                        item,\n+                        obj.__class__.__name__,\n+                        obj.model._meta.label,\n+                    ),\n                     obj=obj.__class__,\n-                    id=\"admin.E109\",\n+                    id=\"admin.E108\",\n                 )\n             ]\n-        return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\"Check that list_display_links is a unique subset of list_display.\"\"\"\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}