{
    "instance_id": "sympy__sympy-12454",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..bed6c192ef 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1068,6 +1068,44 @@ def is_upper_hessenberg(self):\n         \"\"\"\n         return self._eval_is_upper_hessenberg()\n \n+\n+        >>> from sympy import Matrix\n+        >>> m = Matrix(2, 2, [1, 2, 0, 3])\n+        >>> m\n+        Matrix([\n+        [1, 2],\n+        [0, 3]])\n+        >>> m.is_upper\n+        True\n+\n+        >>> m = Matrix(2, 3, [5, 6, 7, 0, 8, 9])\n+        >>> m\n+        Matrix([\n+        [5, 6, 7],\n+        [0, 8, 9]])\n+        >>> m.is_upper\n+        True\n+\n+        >>> m = Matrix(3, 3, [1, 2, 3, 0, 5, 6, 0, 0, 9])\n+        >>> m\n+        Matrix([\n+        [1, 2, 3],\n+        [0, 5, 6],\n+        [0, 0, 9]])\n+        >>> m.is_upper\n+        True\n+\n+        See Also\n+        ========\n+\n+        is_lower\n+        is_diagonal\n+        is_triangular\n+        \"\"\"\n+        return all(self[i, j].is_zero\n+                   for i in range(1, self.rows)\n+                   for j in range(i))\n+=======\n     @property\n     def is_upper(self):\n         \"\"\"Check if matrix is an upper triangular matrix. True can be returned\n@@ -1076,6 +1114,43 @@ def is_upper(self):\n         Examples\n         ========\n \n+        >>> from sympy import Matrix\n+        >>> m = Matrix(2, 2, [1, 2, 0, 3])\n+        >>> m\n+        Matrix([\n+        [1, 2],\n+        [0, 3]])\n+        >>> m.is_upper\n+        True\n+\n+        >>> m = Matrix(2, 3, [5, 6, 7, 0, 8, 9])\n+        >>> m\n+        Matrix([\n+        [5, 6, 7],\n+        [0, 8, 9]])\n+        >>> m.is_upper\n+        True\n+\n+        >>> m = Matrix(3, 3, [1, 2, 3, 0, 5, 6, 0, 0, 9])\n+        >>> m\n+        Matrix([\n+        [1, 2, 3],\n+        [0, 5, 6],\n+        [0, 0, 9]])\n+        >>> m.is_upper\n+        True\n+\n+        See Also\n+        ========\n+\n+        is_lower\n+        is_diagonal\n+        is_triangular\n+        \"\"\"\n+        return all(self[i, j].is_zero\n+                   for i in range(1, self.rows)\n+                   for j in range(min(i, self.cols)))=======\n+\n         >>> from sympy import Matrix\n         >>> m = Matrix(2, 2, [1, 0, 0, 1])\n         >>> m\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}