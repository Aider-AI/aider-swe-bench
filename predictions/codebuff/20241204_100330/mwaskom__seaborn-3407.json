{
    "instance_id": "mwaskom__seaborn-3407",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/seaborn/_core/data.py b/seaborn/_core/data.py\nindex 535fafe8..c011ed33 100644\n--- a/seaborn/_core/data.py\n+++ b/seaborn/_core/data.py\n@@ -124,6 +124,37 @@ class PlotData:\n         \"\"\"\n         Assign values for plot variables given long-form data and/or vector inputs.\n \n+        Parameters\n+        ----------\n+        data\n+            Input data where variable names map to vector values.\n+        variables\n+            Keys are names of plot variables (x, y, ...) each value is one of:\n+\n+            - name of a column (or index level, or dictionary entry) in `data`\n+            - vector in any format that can construct a :class:`pandas.DataFrame`\n+\n+        Returns\n+        -------\n+        frame\n+            Table mapping seaborn variables (x, y, color, ...) to data vectors.\n+        names\n+            Keys are defined seaborn variables; values are names inferred from\n+            the inputs (or None when no name can be determined).\n+        ids\n+            Like the `names` dict, but `None` values are replaced by the `id()`\n+            of the data object that defined the variable.\n+\n+        Raises\n+        ------\n+        ValueError\n+            When variables are strings that don't appear in `data`, or when they are\n+            non-indexed vector datatypes that have a different length from `data`.\n+\n+        \"\"\"\n+        \"\"\"\n+        Assign values for plot variables given long-form data and/or vector inputs.\n+\n         Parameters\n         ----------\n         data\n@@ -164,6 +195,13 @@ class PlotData:\n         given_data = data is not None\n         if data is not None:\n             source_data = data\n+            # Handle MultiIndex columns by flattening them\n+            if isinstance(source_data, pd.DataFrame) and isinstance(source_data.columns, pd.MultiIndex):\n+                source_data = source_data.copy()\n+                source_data.columns = [\n+                    \"_\".join(str(level) for level in col).strip(\"_\")\n+                    for col in source_data.columns\n+                ]\n         else:\n             # Data is optional; all variables can be defined as vectors\n             # But simplify downstream code by always having a usable source data object\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}