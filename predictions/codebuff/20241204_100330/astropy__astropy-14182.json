{
    "instance_id": "astropy__astropy-14182",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..1411e2def1 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -50,6 +50,12 @@ class RST(FixedWidth):\n     or for ones which define column spans through the use of an additional\n     line of dashes in the header.\n \n+    Parameters\n+    ----------\n+    header_rows : list of str, optional\n+        List of strings to write as the header rows. For example,\n+        header_rows=[\"name\", \"unit\"] will write two header rows with column\n+        names in the first row and units in the second row.\n     \"\"\"\n \n     _format_name = \"rst\"\n@@ -57,10 +63,30 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n-        lines = super().write(lines)\n+        if self.header_rows:\n+            # Insert additional header rows after the column names\n+            header_lines = []\n+            for header_row in self.header_rows:\n+                # Create a line with the same structure as the column names\n+                header_line = []\n+                for col, val in zip(self.cols, header_row):\n+                    width = max(len(str(col.name)), len(str(val)))\n+                    header_line.append(str(val).ljust(width))\n+                header_lines.append(\" \".join(header_line))\n+            \n+            # Get the normal output\n+            lines = super().write(lines)\n+            \n+            # Insert header rows after column names but before the separator\n+            lines = [lines[0]] + header_lines + lines[1:]\n+        else:\n+            lines = super().write(lines)\n+            \n+        # Add the top and bottom separators\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}