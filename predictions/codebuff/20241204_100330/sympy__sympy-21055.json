{
    "instance_id": "sympy__sympy-21055",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex e1f97190c0..4c3f59110f 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -309,6 +309,47 @@ def _refine_reim(expr, assumptions):\n     return None\n \n \n+\n+    >>> from sympy.assumptions.refine import refine_sign\n+    >>> from sympy import Symbol, Q, sign, im\n+    >>> x = Symbol('x', real = True)\n+    >>> expr = sign(x)\n+    >>> refine_sign(expr, Q.positive(x) & Q.nonzero(x))\n+    1\n+    >>> refine_sign(expr, Q.negative(x) & Q.nonzero(x))\n+    -1\n+    >>> refine_sign(expr, Q.zero(x))\n+    0\n+    >>> y = Symbol('y', imaginary = True)\n+    >>> expr = sign(y)\n+    >>> refine_sign(expr, Q.positive(im(y)))\n+    I\n+    >>> refine_sign(expr, Q.negative(im(y)))\n+    -I\n+    \"\"\"\n+=======\n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the arg function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> from sympy import Symbol, Q, arg\n+    >>> x = Symbol('x')\n+    >>> refine_arg(arg(x), Q.positive(x))\n+    0\n+    >>> refine_arg(arg(x), Q.negative(x))\n+    pi\n+    \"\"\"\n+    arg = expr.args[0]\n+    if ask(Q.positive(arg), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg), assumptions):\n+        return S.Pi\n+    return expr\n+\n def refine_sign(expr, assumptions):\n     \"\"\"\n     Handler for sign.\n@@ -316,6 +357,24 @@ def refine_sign(expr, assumptions):\n     Examples\n     ========\n \n+    >>> from sympy.assumptions.refine import refine_sign\n+    >>> from sympy import Symbol, Q, sign, im\n+    >>> x = Symbol('x', real = True)\n+    >>> expr = sign(x)\n+    >>> refine_sign(expr, Q.positive(x) & Q.nonzero(x))\n+    1\n+    >>> refine_sign(expr, Q.negative(x) & Q.nonzero(x))\n+    -1\n+    >>> refine_sign(expr, Q.zero(x))\n+    0\n+    >>> y = Symbol('y', imaginary = True)\n+    >>> expr = sign(y)\n+    >>> refine_sign(expr, Q.positive(im(y)))\n+    I\n+    >>> refine_sign(expr, Q.negative(im(y)))\n+    -I\n+    \"\"\"=======\n+\n     >>> from sympy.assumptions.refine import refine_sign\n     >>> from sympy import Symbol, Q, sign, im\n     >>> x = Symbol('x', real = True)\n@@ -380,5 +439,6 @@ def refine_matrixelement(expr, assumptions):\n     're': refine_re,\n     'im': refine_im,\n     'sign': refine_sign,\n+    'arg': refine_arg,\n     'MatrixElement': refine_matrixelement\n }  # type: Dict[str, Callable[[Expr, Boolean], Expr]]\ndiff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 505cd609e8..ecec8028ac 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -200,6 +200,11 @@ def test_refine_issue_12724():\n     assert expr3 == x * y1**2 * Abs(z)\n \n \n+def test_arg():\n+    x = Symbol('x')\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n def test_matrixelement():\n     x = MatrixSymbol('x', 3, 3)\n     i = Symbol('i', positive = True)\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}