{
    "instance_id": "django__django-12184",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2304e7761d..ed669e9794 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -110,6 +110,19 @@ class BaseHandler:\n         if response is None:\n             wrapped_callback = self.make_view_atomic(callback)\n             try:\n+                # Convert None positional args to keyword args to allow defaults to work\n+                if callback_args:\n+                    args = []\n+                    for i, arg in enumerate(callback_args):\n+                        if arg is not None:\n+                            args.append(arg)\n+                        elif i < len(callback_args):\n+                            # Get param name from view function\n+                            import inspect\n+                            sig = inspect.signature(callback)\n+                            param_name = list(sig.parameters.keys())[i + 1]  # +1 to skip request\n+                            callback_kwargs[param_name] = arg\n+                    callback_args = tuple(args)\n                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\n             except Exception as e:\n                 response = self.process_exception_by_middleware(e, request)\ndiff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex b40801b39d..61e67891af 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,6 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n+    path('module/', views.module_view, name='module'),\n+    path('module/<str:format>/', views.module_view, name='module-format'),\n ]\ndiff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 92c4e6399e..b220e49e45 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -42,6 +42,12 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.kwargs, {'year': 2015, 'month': 4, 'day': 12})\n         self.assertEqual(match.route, 'articles/<int:year>/<int:month>/<int:day>/')\n \n+    def test_optional_parameter_with_default(self):\n+        \"\"\"Optional URL parameters should allow view default values to work.\"\"\"\n+        match = resolve('/module/')\n+        self.assertEqual(match.args, ())\n+        self.assertEqual(match.kwargs, {})\n+\n     def test_two_variable_at_start_of_path_pattern(self):\n         match = resolve('/en/foo/')\n         self.assertEqual(match.url_name, 'lang-and-path')\ndiff --git a/tests/urlpatterns/views.py b/tests/urlpatterns/views.py\nindex 3f8e055a53..93d5d0233d 100644\n--- a/tests/urlpatterns/views.py\n+++ b/tests/urlpatterns/views.py\n@@ -3,3 +3,6 @@ from django.http import HttpResponse\n \n def empty_view(request, *args, **kwargs):\n     return HttpResponse()\n+\n+def module_view(request, format='html'):\n+    return HttpResponse()\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}