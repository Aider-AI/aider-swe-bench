{
    "instance_id": "sympy__sympy-21627",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 892e19cabb..2445e3a828 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -265,9 +265,24 @@ def _eval_is_finite(self):\n         return arg.is_finite\n \n     def _eval_is_zero(self):\n+        from sympy.core.cache import NO_CACHE\n         arg = self.args[0]\n         if arg.is_zero:\n             return True\n+            \n+        # Add recursion guard using NO_CACHE\n+        if getattr(arg, '_cosh_is_zero_recursion', False):\n+            return None\n+            \n+        try:\n+            # Set recursion flag\n+            arg._cosh_is_zero_recursion = True\n+            # Evaluate is_zero with recursion guard\n+            result = arg.is_zero\n+            return result\n+        finally:\n+            # Always clean up recursion flag\n+            arg._cosh_is_zero_recursion = False\n \n \n class cosh(HyperbolicFunction):\ndiff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 24c2fae25d..ec4884e944 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -1021,18 +1021,22 @@ def test_sinh_rewrite():\n     tanh_half = tanh(S.Half*x)\n     assert sinh(x).rewrite(tanh) == 2*tanh_half/(1 - tanh_half**2)\n     coth_half = coth(S.Half*x)\n-    assert sinh(x).rewrite(coth) == 2*coth_half/(coth_half**2 - 1)\n+    assert sinh(x).rewrite(coth) == 2*coth_half/(coth_half**2 - 1)    def test_cosh_rewrite():\n+        x = Symbol('x')\n+        assert cosh(x).rewrite(exp) == (exp(x) + exp(-x))/2 \\\n+            == cosh(x).rewrite('tractable')\n+        assert cosh(x).rewrite(sinh) == -I*sinh(x + I*pi/2)\n+        tanh_half = tanh(S.Half*x)**2\n+        assert cosh(x).rewrite(tanh) == (1 + tanh_half)/(1 - tanh_half)\n+        coth_half = coth(S.Half*x)**2\n+        assert cosh(x).rewrite(coth) == (coth_half + 1)/(coth_half - 1)\n \n-\n-def test_cosh_rewrite():\n-    x = Symbol('x')\n-    assert cosh(x).rewrite(exp) == (exp(x) + exp(-x))/2 \\\n-        == cosh(x).rewrite('tractable')\n-    assert cosh(x).rewrite(sinh) == -I*sinh(x + I*pi/2)\n-    tanh_half = tanh(S.Half*x)**2\n-    assert cosh(x).rewrite(tanh) == (1 + tanh_half)/(1 - tanh_half)\n-    coth_half = coth(S.Half*x)**2\n-    assert cosh(x).rewrite(coth) == (coth_half + 1)/(coth_half - 1)\n+    def test_cosh_complex_recursion():\n+        from sympy import sympify\n+        # Test the specific failing case\n+        expr = sympify(\"cosh(acos(-i + acosh(-g + i)))\")\n+        # Should not raise RecursionError\n+        assert expr.is_zero is None\n \n \n def test_tanh_rewrite():\n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": true,
    "resolved": false
}