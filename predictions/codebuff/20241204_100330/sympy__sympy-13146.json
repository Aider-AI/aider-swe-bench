{
    "instance_id": "sympy__sympy-13146",
    "model_name_or_path": "codebuff",
    "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 82bc545f33..d6ae7a04b6 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -191,6 +191,14 @@ def __new__(cls, b, e, evaluate=None):\n         from sympy.functions.elementary.exponential import exp_polar\n \n         b = _sympify(b)\n+        # Convert float exponents to rationals when possible\n+        if isinstance(e, float):\n+            from sympy.core.numbers import Rational\n+            try:\n+                p, q = Rational(str(e)).as_numer_denom()\n+                e = Rational(p, q)\n+            except:\n+                pass\n         e = _sympify(e)\n         if evaluate:\n             if e is S.Zero:\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 402fdcc7dc..abf49c5f4d 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -51,7 +51,7 @@ class CantSympify(object):\n     pass\n \n \n-def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n+def sympify(a, locals=None, convert_xor=True, strict=False, rational=True,\n         evaluate=None):\n     \"\"\"Converts an arbitrary expression to a type that can be used inside SymPy.\n \n",
    "cost": 0,
    "edit_outcome": true,
    "lint_outcome": true,
    "test_outcome": false,
    "resolved": false
}